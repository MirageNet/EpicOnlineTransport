// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// All possible types of login methods, availability depends on permissions granted to the client
	/// <seealso cref="AuthInterface.Login" />
	/// <seealso cref="Credentials" />
	/// </summary>
	public enum LoginCredentialType : int
	{
		/// <summary>
		/// Email / Password. Use of this login type is restricted.
		/// </summary>
		Password = 0,
		/// <summary>
		/// Exchange code, typically generated by launcher
		/// </summary>
		ExchangeCode = 1,
		/// <summary>
		/// Long-lived access token that is stored on the local device to allow persisting a user login session over multiple runs of the application.
		/// When using this login type, if an existing access token is not found or it is invalid or otherwise expired, the error result <see cref="Result" />::<see cref="Result.InvalidAuth" /> is returned.
		/// 
		/// @note On Desktop and Mobile platforms, the persistent access token is automatically managed by the SDK that stores it in the keychain of the currently logged in user of the local device.
		/// On Console platforms, after a successful login using the <see cref="DeviceCode" /> login type,
		/// the persistent access token is retrieved using the <see cref="AuthInterface.CopyUserAuthToken" /> API and
		/// stored by the application for the currently logged in user of the local device.
		/// </summary>
		PersistentAuth = 2,
		/// <summary>
		/// Console platforms only; not available on Desktop or Mobile.
		/// 
		/// Initiates a PIN grant login flow that is used to login a local user to their Epic Account for the first time,
		/// and also whenever their locally persisted login credentials would have expired.
		/// 
		/// @details The flow is as following:
		/// 1. Game initiates the user login flow by calling <see cref="AuthInterface.Login" /> API with the <see cref="DeviceCode" /> login type.
		/// 2. The SDK internally requests the authentication backend service to begin the login flow, and returns the game
		/// a new randomly generated device code along with authorization URL information needed to complete the flow.
		/// This information is returned via the <see cref="AuthInterface.Login" /> API callback. The <see cref="LoginCallbackInfo" />::ResultCode
		/// will be set to <see cref="Result.AuthPinGrantCode" /> and the <see cref="PinGrantInfo" /> struct will contain the needed information.
		/// 3. Game presents the device code and the authorization URL information on screen to the end-user.
		/// 4. The user will login to their Epic Account using an external device, e.g. a mobile device or a desktop PC,
		/// by browsing to the presented authentication URL and entering the device code presented by the game on the console.
		/// 5. Once the user has successfully logged in on their external device, the SDK will call the <see cref="AuthInterface.Login" /> callback
		/// once more with the operation result code. If the user failed to login within the allowed time before the device code
		/// would expire, the result code returned by the callback will contain the appropriate error result.
		/// 
		/// @details After logging in a local user for the first time, the game can remember the user login to allow automatically logging
		/// in the same user the next time they start the game. This avoids prompting the same user to go through the login flow
		/// across multiple game sessions over long periods of time.
		/// To do this, after a successful login using the <see cref="DeviceCode" /> login type, the game can call the <see cref="AuthInterface.CopyUserAuthToken" /> API
		/// to retrieve a long-lived refresh token that is specifically created for this purpose on Console. The game can store
		/// the long-lived refresh token locally on the device, for the currently logged in local user of the device.
		/// Then, on subsequent game starts the game can call the <see cref="AuthInterface.Login" /> API with the previously stored refresh token and
		/// using the <see cref="PersistentAuth" /> login type to automatically login the current local user of the device.
		/// </summary>
		DeviceCode = 3,
		/// <summary>
		/// Request credentials from the EOS SDK Dev Auth Tool
		/// </summary>
		Developer = 4,
		/// <summary>
		/// Refresh token
		/// </summary>
		RefreshToken = 5,
		/// <summary>
		/// Initiate a login through the account portal. Cannot be used on consoles.
		/// </summary>
		AccountPortal = 6,
		/// <summary>
		/// Initiate a login through an external provider, such as Steam, PSN, XBL, or Nintendo.
		/// 
		/// @details <see cref="Result.InvalidUser" /> will be returned when the external auth login fails due to an external account not being linked.
		/// An <see cref="ContinuanceToken" /> will be set in the <see cref="LoginCallbackInfo" /> data.
		/// <see cref="AuthInterface.LinkAccount" /> should be called with the <see cref="ContinuanceToken" /> to continue the external account login and link the external account.
		/// </summary>
		ExternalAuth = 7
	}
}