// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Metrics
{
	/// <summary>
	/// BeginPlayerSession.
	/// </summary>
	public class BeginPlayerSessionOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="MetricsInterface.BeginplayersessionApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return MetricsInterface.BeginplayersessionApiLatest; } }

		public BeginPlayerSessionOptionsAccountId AccountId { get; set; }

		/// <summary>
		/// The in-game display name for the user as UTF-8 string.
		/// </summary>
		public string DisplayName { get; set; }

		/// <summary>
		/// The user's game controller type.
		/// </summary>
		public UserControllerType ControllerType { get; set; }

		/// <summary>
		/// IP address of the game server hosting the game session. For a localhost session, set to NULL.
		/// 
		/// @details Must be in either one of the following IPv4 or IPv6 string formats:
		/// "127.0.0.1".
		/// "1200:0000:AB00:1234:0000:2552:7777:1313".
		/// If both IPv4 and IPv6 addresses are available, use the IPv6 address.
		/// </summary>
		public string ServerIp { get; set; }

		/// <summary>
		/// Optional, application-defined custom match session identifier. If the identifier is not used, set to NULL.
		/// 
		/// @details The game can tag each game session with a custom session match identifier,
		/// which will be shown in the Played Sessions listing at the user profile dashboard.
		/// </summary>
		public string GameSessionId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct BeginPlayerSessionOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private BeginPlayerSessionOptionsAccountIdInternal m_AccountId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_DisplayName;
		private UserControllerType m_ControllerType;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ServerIp;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_GameSessionId;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public BeginPlayerSessionOptionsAccountIdInternal AccountId
		{
			get
			{
				var value = Helper.GetDefault<BeginPlayerSessionOptionsAccountIdInternal>();
				Helper.TryMarshalGet(m_AccountId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AccountId, value); }
		}

		public string DisplayName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_DisplayName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_DisplayName, value); }
		}

		public UserControllerType ControllerType
		{
			get
			{
				var value = Helper.GetDefault<UserControllerType>();
				Helper.TryMarshalGet(m_ControllerType, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ControllerType, value); }
		}

		public string ServerIp
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ServerIp, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ServerIp, value); }
		}

		public string GameSessionId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_GameSessionId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_GameSessionId, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_AccountId);
		}
	}
}