// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about the data being sent and to which player
	/// </summary>
	public class SendPacketOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="P2PInterface.SendpacketApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return P2PInterface.SendpacketApiLatest; } }

		/// <summary>
		/// The Product User ID of the local user who is sending this packet
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The Product User ID of the Peer you would like to send a packet to
		/// </summary>
		public ProductUserId RemoteUserId { get; set; }

		/// <summary>
		/// The socket ID for data you are sending in this packet
		/// </summary>
		public SocketId SocketId { get; set; }

		/// <summary>
		/// Channel associated with this data
		/// </summary>
		public byte Channel { get; set; }

		/// <summary>
		/// The data to be sent to the RemoteUser
		/// </summary>
		public byte[] Data { get; set; }

		/// <summary>
		/// If false and we do not already have an established connection to the peer, this data will be dropped
		/// </summary>
		public bool AllowDelayedDelivery { get; set; }

		/// <summary>
		/// Setting to control the delivery reliability of this packet
		/// </summary>
		public PacketReliability Reliability { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct SendPacketOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_RemoteUserId;
		private IntPtr m_SocketId;
		private byte m_Channel;
		private uint m_DataLengthBytes;
		private IntPtr m_Data;
		private int m_AllowDelayedDelivery;
		private PacketReliability m_Reliability;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public ProductUserId RemoteUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_RemoteUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_RemoteUserId, value); }
		}

		public SocketIdInternal? SocketId
		{
			get
			{
				var value = Helper.GetDefault<SocketIdInternal?>();
				Helper.TryMarshalGet(m_SocketId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SocketId, value); }
		}

		public byte Channel
		{
			get
			{
				var value = Helper.GetDefault<byte>();
				Helper.TryMarshalGet(m_Channel, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Channel, value); }
		}

		public byte[] Data
		{
			get
			{
				var value = Helper.GetDefault<byte[]>();
				Helper.TryMarshalGet(m_Data, out value, m_DataLengthBytes);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Data, value, out m_DataLengthBytes); }
		}

		public bool AllowDelayedDelivery
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_AllowDelayedDelivery, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AllowDelayedDelivery, value); }
		}

		public PacketReliability Reliability
		{
			get
			{
				var value = Helper.GetDefault<PacketReliability>();
				Helper.TryMarshalGet(m_Reliability, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Reliability, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_SocketId);
			Helper.TryMarshalDispose(ref m_Data);
		}
	}
}