// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about who would like to accept a connection, and which connection.
	/// </summary>
	public class AcceptConnectionOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="P2PInterface.AcceptconnectionApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return P2PInterface.AcceptconnectionApiLatest; } }

		/// <summary>
		/// The Product User ID of the local user who is accepting any pending or future connections with RemoteUserId
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The Product User ID of the remote user who has either sent a connection request or is expected to in the future
		/// </summary>
		public ProductUserId RemoteUserId { get; set; }

		/// <summary>
		/// The socket ID of the connection to accept on
		/// </summary>
		public SocketId SocketId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct AcceptConnectionOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_RemoteUserId;
		private IntPtr m_SocketId;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public ProductUserId RemoteUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_RemoteUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_RemoteUserId, value); }
		}

		public SocketIdInternal? SocketId
		{
			get
			{
				var value = Helper.GetDefault<SocketIdInternal?>();
				Helper.TryMarshalGet(m_SocketId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SocketId, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_SocketId);
		}
	}
}