// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.P2P
{
	/// <summary>
	/// Structure containing information about an incoming connection request.
	/// </summary>
	public class OnIncomingConnectionRequestInfo
	{
		/// <summary>
		/// Client-specified data passed into <see cref="Presence.PresenceInterface.AddNotifyOnPresenceChanged" />
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the local user who is being requested to open a P2P session with RemoteUserId
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The Product User ID of the remote user who requested a peer connection with the local user
		/// </summary>
		public ProductUserId RemoteUserId { get; set; }

		/// <summary>
		/// The ID of the socket the Remote User wishes to communicate on
		/// </summary>
		public SocketId SocketId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct OnIncomingConnectionRequestInfoInternal : ICallbackInfo
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		private IntPtr m_RemoteUserId;
		private IntPtr m_SocketId;

		public object ClientData
		{
			get
			{
				var value = Helper.GetDefault<object>();
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public IntPtr ClientDataAddress { get { return m_ClientData; } }

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
		}

		public ProductUserId RemoteUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_RemoteUserId, out value);
				return value;
			}
		}

		public SocketIdInternal? SocketId
		{
			get
			{
				var value = Helper.GetDefault<SocketIdInternal?>();
				Helper.TryMarshalGet(m_SocketId, out value);
				return value;
			}
		}
	}
}