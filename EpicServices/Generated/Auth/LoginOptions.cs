// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Auth
{
	/// <summary>
	/// Input parameters for the <see cref="AuthInterface.Login" /> function.
	/// </summary>
	public class LoginOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="AuthInterface.LoginApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return AuthInterface.LoginApiLatest; } }

		/// <summary>
		/// Credentials specified for a given login method
		/// </summary>
		public Credentials Credentials { get; set; }

		/// <summary>
		/// Auth scope flags are permissions to request from the user while they are logging in. This is a bitwise-or union of <see cref="AuthScopeFlags" /> flags defined above
		/// </summary>
		public AuthScopeFlags ScopeFlags { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct LoginOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_Credentials;
		private AuthScopeFlags m_ScopeFlags;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public CredentialsInternal? Credentials
		{
			get
			{
				var value = Helper.GetDefault<CredentialsInternal?>();
				Helper.TryMarshalGet(m_Credentials, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Credentials, value); }
		}

		public AuthScopeFlags ScopeFlags
		{
			get
			{
				var value = Helper.GetDefault<AuthScopeFlags>();
				Helper.TryMarshalGet(m_ScopeFlags, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ScopeFlags, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Credentials);
		}
	}
}