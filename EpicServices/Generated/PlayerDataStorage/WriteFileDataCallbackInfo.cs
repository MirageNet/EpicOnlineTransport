// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.PlayerDataStorage
{
	/// <summary>
	/// Data containing data for a chunk of a file being written
	/// </summary>
	public class WriteFileDataCallbackInfo
	{
		/// <summary>
		/// Client-specified data passed into the file write request
		/// </summary>
		public object ClientData { get; set; }

		/// <summary>
		/// The Product User ID of the local user who initiated this request
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// The file name that is being written to
		/// </summary>
		public string Filename { get; set; }

		/// <summary>
		/// The maximum amount of data in bytes that can be written safely to DataBuffer
		/// </summary>
		public uint DataBufferLengthBytes { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct WriteFileDataCallbackInfoInternal : ICallbackInfo
	{
		private IntPtr m_ClientData;
		private IntPtr m_LocalUserId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Filename;
		private uint m_DataBufferLengthBytes;

		public object ClientData
		{
			get
			{
				var value = Helper.GetDefault<object>();
				Helper.TryMarshalGet(m_ClientData, out value);
				return value;
			}
		}

		public IntPtr ClientDataAddress { get { return m_ClientData; } }

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
		}

		public string Filename
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Filename, out value);
				return value;
			}
		}

		public uint DataBufferLengthBytes
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_DataBufferLengthBytes, out value);
				return value;
			}
		}
	}
}