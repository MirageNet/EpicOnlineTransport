// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Leaderboards
{
	public sealed class LeaderboardsInterface : Handle
	{
		public LeaderboardsInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardRecordByUserIdOptions" /> struct.
		/// </summary>
		public const int CopyleaderboardrecordbyuseridApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardRecordByIndexOptions" /> struct.
		/// </summary>
		public const int CopyleaderboardrecordbyindexApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="GetLeaderboardRecordCount" /> API.
		/// </summary>
		public const int GetleaderboardrecordcountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LeaderboardRecord" /> struct.
		/// </summary>
		public const int LeaderboardrecordApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="QueryLeaderboardRanks" /> struct.
		/// </summary>
		public const int QueryleaderboardranksApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardUserScoreByUserIdOptions" /> struct.
		/// </summary>
		public const int CopyleaderboarduserscorebyuseridApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardUserScoreByIndexOptions" /> struct.
		/// </summary>
		public const int CopyleaderboarduserscorebyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="GetLeaderboardUserScoreCount" /> API.
		/// </summary>
		public const int GetleaderboarduserscorecountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LeaderboardUserScore" /> struct.
		/// </summary>
		public const int LeaderboarduserscoreApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryLeaderboardUserScores" /> struct.
		/// </summary>
		public const int QueryleaderboarduserscoresApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="UserScoresQueryStatInfo" /> struct.
		/// </summary>
		public const int UserscoresquerystatinfoApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardDefinitionByLeaderboardIdOptions" /> struct.
		/// </summary>
		public const int CopyleaderboarddefinitionbyleaderboardidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyLeaderboardDefinitionByIndexOptions" /> struct.
		/// </summary>
		public const int CopyleaderboarddefinitionbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="GetLeaderboardDefinitionCount" /> API.
		/// </summary>
		public const int GetleaderboarddefinitioncountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="Definition" /> struct.
		/// </summary>
		public const int DefinitionApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryLeaderboardDefinitions" /> struct.
		/// </summary>
		public const int QueryleaderboarddefinitionsApiLatest = 1;

		/// <summary>
		/// Timestamp value representing an undefined time for <see cref="LeaderboardsInterface" />.
		/// </summary>
		public const int TimeUndefined = -1;

		/// <summary>
		/// Query for a list of existing leaderboards definitions including their attributes.
		/// </summary>
		/// <param name="options">Structure containing information about the application whose leaderboard definitions we're retrieving.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="completionDelegate">This function is called when the query operation completes.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryLeaderboardDefinitions(QueryLeaderboardDefinitionsOptions options, object clientData, OnQueryLeaderboardDefinitionsCompleteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryLeaderboardDefinitionsOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryLeaderboardDefinitionsCompleteCallbackInternal(OnQueryLeaderboardDefinitionsComplete);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Leaderboards_QueryLeaderboardDefinitions(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Fetch the number of leaderboards definitions that are cached locally.
		/// <seealso cref="CopyLeaderboardDefinitionByIndex" />
		/// <seealso cref="CopyLeaderboardDefinitionByLeaderboardId" />
		/// </summary>
		/// <param name="options">The Options associated with retrieving the leaderboard count.</param>
		/// <returns>
		/// Number of leaderboards or 0 if there is an error
		/// </returns>
		public uint GetLeaderboardDefinitionCount(GetLeaderboardDefinitionCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetLeaderboardDefinitionCountOptionsInternal>(options);

			var funcResult = EOS_Leaderboards_GetLeaderboardDefinitionCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches a leaderboard definition from the cache using an index.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the index being accessed.</param>
		/// <param name="outLeaderboardDefinition">The leaderboard data for the given index, if it exists and is valid, use <see cref="Release" /> when finished.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLeaderboardDefinition
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard is not found
		/// </returns>
		public Result CopyLeaderboardDefinitionByIndex(CopyLeaderboardDefinitionByIndexOptions options, out Definition outLeaderboardDefinition)
		{
			var optionsInternal = Helper.CopyProperties<CopyLeaderboardDefinitionByIndexOptionsInternal>(options);

			outLeaderboardDefinition = Helper.GetDefault<Definition>();

			var outLeaderboardDefinitionAddress = IntPtr.Zero;

			var funcResult = EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(InnerHandle, ref optionsInternal, ref outLeaderboardDefinitionAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<DefinitionInternal, Definition>(outLeaderboardDefinitionAddress, out outLeaderboardDefinition))
			{
				EOS_Leaderboards_LeaderboardDefinition_Release(outLeaderboardDefinitionAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches a leaderboard definition from the cache using a leaderboard ID.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the leaderboard ID being accessed.</param>
		/// <param name="outLeaderboardDefinition">The leaderboard definition for the given leaderboard ID, if it exists and is valid, use <see cref="Release" /> when finished.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLeaderboardDefinition
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard data is not found
		/// </returns>
		public Result CopyLeaderboardDefinitionByLeaderboardId(CopyLeaderboardDefinitionByLeaderboardIdOptions options, out Definition outLeaderboardDefinition)
		{
			var optionsInternal = Helper.CopyProperties<CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal>(options);

			outLeaderboardDefinition = Helper.GetDefault<Definition>();

			var outLeaderboardDefinitionAddress = IntPtr.Zero;

			var funcResult = EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(InnerHandle, ref optionsInternal, ref outLeaderboardDefinitionAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<DefinitionInternal, Definition>(outLeaderboardDefinitionAddress, out outLeaderboardDefinition))
			{
				EOS_Leaderboards_LeaderboardDefinition_Release(outLeaderboardDefinitionAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Retrieves top leaderboard records by rank in the leaderboard matching the given leaderboard ID.
		/// </summary>
		/// <param name="options">Structure containing information about the leaderboard records we're retrieving.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="completionDelegate">This function is called when the query operation completes.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryLeaderboardRanks(QueryLeaderboardRanksOptions options, object clientData, OnQueryLeaderboardRanksCompleteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryLeaderboardRanksOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryLeaderboardRanksCompleteCallbackInternal(OnQueryLeaderboardRanksComplete);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Leaderboards_QueryLeaderboardRanks(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Fetch the number of leaderboard records that are cached locally.
		/// <seealso cref="CopyLeaderboardRecordByIndex" />
		/// <seealso cref="CopyLeaderboardRecordByUserId" />
		/// </summary>
		/// <param name="options">The Options associated with retrieving the leaderboard record count.</param>
		/// <returns>
		/// Number of leaderboard records or 0 if there is an error
		/// </returns>
		public uint GetLeaderboardRecordCount(GetLeaderboardRecordCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetLeaderboardRecordCountOptionsInternal>(options);

			var funcResult = EOS_Leaderboards_GetLeaderboardRecordCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches a leaderboard record from a given index.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the index being accessed.</param>
		/// <param name="outLeaderboardRecord">The leaderboard record for the given index, if it exists and is valid, use <see cref="Release" /> when finished.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard record is available and passed out in OutLeaderboardRecord
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard is not found
		/// </returns>
		public Result CopyLeaderboardRecordByIndex(CopyLeaderboardRecordByIndexOptions options, out LeaderboardRecord outLeaderboardRecord)
		{
			var optionsInternal = Helper.CopyProperties<CopyLeaderboardRecordByIndexOptionsInternal>(options);

			outLeaderboardRecord = Helper.GetDefault<LeaderboardRecord>();

			var outLeaderboardRecordAddress = IntPtr.Zero;

			var funcResult = EOS_Leaderboards_CopyLeaderboardRecordByIndex(InnerHandle, ref optionsInternal, ref outLeaderboardRecordAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecordAddress, out outLeaderboardRecord))
			{
				EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecordAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches a leaderboard record from a given user ID.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the user ID being accessed.</param>
		/// <param name="outLeaderboardRecord">The leaderboard record for the given user ID, if it exists and is valid, use <see cref="Release" /> when finished.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard record is available and passed out in OutLeaderboardRecord
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard data is not found
		/// </returns>
		public Result CopyLeaderboardRecordByUserId(CopyLeaderboardRecordByUserIdOptions options, out LeaderboardRecord outLeaderboardRecord)
		{
			var optionsInternal = Helper.CopyProperties<CopyLeaderboardRecordByUserIdOptionsInternal>(options);

			outLeaderboardRecord = Helper.GetDefault<LeaderboardRecord>();

			var outLeaderboardRecordAddress = IntPtr.Zero;

			var funcResult = EOS_Leaderboards_CopyLeaderboardRecordByUserId(InnerHandle, ref optionsInternal, ref outLeaderboardRecordAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<LeaderboardRecordInternal, LeaderboardRecord>(outLeaderboardRecordAddress, out outLeaderboardRecord))
			{
				EOS_Leaderboards_LeaderboardRecord_Release(outLeaderboardRecordAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Query for a list of scores for a given list of users.
		/// </summary>
		/// <param name="options">Structure containing information about the users whose scores we're retrieving.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="completionDelegate">This function is called when the query operation completes.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryLeaderboardUserScores(QueryLeaderboardUserScoresOptions options, object clientData, OnQueryLeaderboardUserScoresCompleteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryLeaderboardUserScoresOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryLeaderboardUserScoresCompleteCallbackInternal(OnQueryLeaderboardUserScoresComplete);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Leaderboards_QueryLeaderboardUserScores(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Fetch the number of leaderboard user scores that are cached locally.
		/// <seealso cref="CopyLeaderboardUserScoreByIndex" />
		/// <seealso cref="CopyLeaderboardUserScoreByUserId" />
		/// </summary>
		/// <param name="options">The Options associated with retrieving the leaderboard user scores count.</param>
		/// <returns>
		/// Number of leaderboard records or 0 if there is an error
		/// </returns>
		public uint GetLeaderboardUserScoreCount(GetLeaderboardUserScoreCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetLeaderboardUserScoreCountOptionsInternal>(options);

			var funcResult = EOS_Leaderboards_GetLeaderboardUserScoreCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches leaderboard user score from a given index.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the index being accessed.</param>
		/// <param name="outLeaderboardUserScore">The leaderboard user score for the given index, if it exists and is valid, use <see cref="Release" /> when finished.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard scores are available and passed out in OutLeaderboardUserScore
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard user scores are not found
		/// </returns>
		public Result CopyLeaderboardUserScoreByIndex(CopyLeaderboardUserScoreByIndexOptions options, out LeaderboardUserScore outLeaderboardUserScore)
		{
			var optionsInternal = Helper.CopyProperties<CopyLeaderboardUserScoreByIndexOptionsInternal>(options);

			outLeaderboardUserScore = Helper.GetDefault<LeaderboardUserScore>();

			var outLeaderboardUserScoreAddress = IntPtr.Zero;

			var funcResult = EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(InnerHandle, ref optionsInternal, ref outLeaderboardUserScoreAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScoreAddress, out outLeaderboardUserScore))
			{
				EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScoreAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches leaderboard user score from a given user ID.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the user ID being accessed.</param>
		/// <param name="outLeaderboardUserScore">The leaderboard user score for the given user ID, if it exists and is valid, use <see cref="Release" /> when finished.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leaderboard scores are available and passed out in OutLeaderboardUserScore
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the leaderboard user scores are not found
		/// </returns>
		public Result CopyLeaderboardUserScoreByUserId(CopyLeaderboardUserScoreByUserIdOptions options, out LeaderboardUserScore outLeaderboardUserScore)
		{
			var optionsInternal = Helper.CopyProperties<CopyLeaderboardUserScoreByUserIdOptionsInternal>(options);

			outLeaderboardUserScore = Helper.GetDefault<LeaderboardUserScore>();

			var outLeaderboardUserScoreAddress = IntPtr.Zero;

			var funcResult = EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(InnerHandle, ref optionsInternal, ref outLeaderboardUserScoreAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<LeaderboardUserScoreInternal, LeaderboardUserScore>(outLeaderboardUserScoreAddress, out outLeaderboardUserScore))
			{
				EOS_Leaderboards_LeaderboardUserScore_Release(outLeaderboardUserScoreAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback]
		internal static void OnQueryLeaderboardUserScoresComplete(IntPtr address)
		{
			OnQueryLeaderboardUserScoresCompleteCallback callback = null;
			OnQueryLeaderboardUserScoresCompleteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardUserScoresCompleteCallback, OnQueryLeaderboardUserScoresCompleteCallbackInfoInternal, OnQueryLeaderboardUserScoresCompleteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnQueryLeaderboardRanksComplete(IntPtr address)
		{
			OnQueryLeaderboardRanksCompleteCallback callback = null;
			OnQueryLeaderboardRanksCompleteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardRanksCompleteCallback, OnQueryLeaderboardRanksCompleteCallbackInfoInternal, OnQueryLeaderboardRanksCompleteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnQueryLeaderboardDefinitionsComplete(IntPtr address)
		{
			OnQueryLeaderboardDefinitionsCompleteCallback callback = null;
			OnQueryLeaderboardDefinitionsCompleteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryLeaderboardDefinitionsCompleteCallback, OnQueryLeaderboardDefinitionsCompleteCallbackInfoInternal, OnQueryLeaderboardDefinitionsCompleteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_LeaderboardDefinition_Release(IntPtr leaderboardDefinition);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_LeaderboardRecord_Release(IntPtr leaderboardRecord);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_LeaderboardUserScore_Release(IntPtr leaderboardUserScore);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_Definition_Release(IntPtr leaderboardDefinition);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByUserId(IntPtr handle, ref CopyLeaderboardUserScoreByUserIdOptionsInternal options, ref IntPtr outLeaderboardUserScore);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Leaderboards_CopyLeaderboardUserScoreByIndex(IntPtr handle, ref CopyLeaderboardUserScoreByIndexOptionsInternal options, ref IntPtr outLeaderboardUserScore);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_Leaderboards_GetLeaderboardUserScoreCount(IntPtr handle, ref GetLeaderboardUserScoreCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_QueryLeaderboardUserScores(IntPtr handle, ref QueryLeaderboardUserScoresOptionsInternal options, IntPtr clientData, OnQueryLeaderboardUserScoresCompleteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Leaderboards_CopyLeaderboardRecordByUserId(IntPtr handle, ref CopyLeaderboardRecordByUserIdOptionsInternal options, ref IntPtr outLeaderboardRecord);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Leaderboards_CopyLeaderboardRecordByIndex(IntPtr handle, ref CopyLeaderboardRecordByIndexOptionsInternal options, ref IntPtr outLeaderboardRecord);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_Leaderboards_GetLeaderboardRecordCount(IntPtr handle, ref GetLeaderboardRecordCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_QueryLeaderboardRanks(IntPtr handle, ref QueryLeaderboardRanksOptionsInternal options, IntPtr clientData, OnQueryLeaderboardRanksCompleteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByLeaderboardId(IntPtr handle, ref CopyLeaderboardDefinitionByLeaderboardIdOptionsInternal options, ref IntPtr outLeaderboardDefinition);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Leaderboards_CopyLeaderboardDefinitionByIndex(IntPtr handle, ref CopyLeaderboardDefinitionByIndexOptionsInternal options, ref IntPtr outLeaderboardDefinition);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_Leaderboards_GetLeaderboardDefinitionCount(IntPtr handle, ref GetLeaderboardDefinitionCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Leaderboards_QueryLeaderboardDefinitions(IntPtr handle, ref QueryLeaderboardDefinitionsOptionsInternal options, IntPtr clientData, OnQueryLeaderboardDefinitionsCompleteCallbackInternal completionDelegate);
	}
}