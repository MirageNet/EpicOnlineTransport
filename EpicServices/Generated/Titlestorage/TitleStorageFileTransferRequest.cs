// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.TitleStorage
{
	public sealed class TitleStorageFileTransferRequest : Handle
	{
		public TitleStorageFileTransferRequest(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// Get the current state of a file request.
		/// </summary>
		/// <returns>
		/// <see cref="Result.Success" /> if complete and successful, <see cref="Result.RequestInProgress" /> if the request is still in progress, or another state for failure.
		/// </returns>
		public Result GetFileRequestState()
		{
			var funcResult = EOS_TitleStorageFileTransferRequest_GetFileRequestState(InnerHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Get the file name of the file this request is for. OutStringLength will always be set to the string length of the file name if it is not NULL.
		/// <seealso cref="TitleStorageInterface.FilenameMaxLengthBytes" />
		/// </summary>
		/// <param name="filenameStringBufferSizeBytes">The maximum number of bytes that can be written to OutStringBuffer</param>
		/// <param name="outStringBuffer">The buffer to write the NULL-terminated utf8 file name into, if successful</param>
		/// <param name="outStringLength">How long the file name is (not including null terminator)</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the file name was successfully written to OutFilenameBuffer, a failure result otherwise
		/// </returns>
		public Result GetFilename(uint filenameStringBufferSizeBytes, System.Text.StringBuilder outStringBuffer, out int outStringLength)
		{
			outStringLength = Helper.GetDefault<int>();

			var funcResult = EOS_TitleStorageFileTransferRequest_GetFilename(InnerHandle, filenameStringBufferSizeBytes, outStringBuffer, ref outStringLength);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Attempt to cancel this file request in progress. This is a best-effort command and is not guaranteed to be successful if the request has completed before this function is called.
		/// </summary>
		/// <returns>
		/// <see cref="Result.Success" /> if successful or already canceled, or <see cref="Result.NoChange" /> if request is not cancelable.
		/// </returns>
		public Result CancelRequest()
		{
			var funcResult = EOS_TitleStorageFileTransferRequest_CancelRequest(InnerHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Free the memory used by a cloud-storage file request handle. This will not cancel a request in progress.
		/// </summary>
		public void Release()
		{
			EOS_TitleStorageFileTransferRequest_Release(InnerHandle);
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_TitleStorageFileTransferRequest_Release(IntPtr titleStorageFileTransferHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_TitleStorageFileTransferRequest_CancelRequest(IntPtr handle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_TitleStorageFileTransferRequest_GetFilename(IntPtr handle, uint filenameStringBufferSizeBytes, System.Text.StringBuilder outStringBuffer, ref int outStringLength);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_TitleStorageFileTransferRequest_GetFileRequestState(IntPtr handle);
	}
}