// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Platform
{
	/// <summary>
	/// Options for initializing the Epic Online Services SDK.
	/// </summary>
	public class InitializeOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="PlatformInterface.InitializeApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return PlatformInterface.InitializeApiLatest; } }

		/// <summary>
		/// A custom memory allocator, if desired.
		/// </summary>
		public AllocateMemoryFunc AllocateMemoryFunction { get; set; }

		/// <summary>
		/// A corresponding memory reallocator. If the AllocateMemoryFunction is nulled, then this field must also be nulled.
		/// </summary>
		public ReallocateMemoryFunc ReallocateMemoryFunction { get; set; }

		/// <summary>
		/// A corresponding memory releaser. If the AllocateMemoryFunction is nulled, then this field must also be nulled.
		/// </summary>
		public ReleaseMemoryFunc ReleaseMemoryFunction { get; set; }

		/// <summary>
		/// The name of the product using the Epic Online Services SDK.
		/// 
		/// The name string is required to be non-empty and at maximum of 64 characters long.
		/// The string buffer can consist of the following characters:
		/// A-Z, a-z, 0-9, dot, underscore, space, exclamation mark, question mark, and sign, hyphen, parenthesis, plus, minus, colon.
		/// </summary>
		public string ProductName { get; set; }

		/// <summary>
		/// Product version of the running application.
		/// 
		/// The name string has same requirements as the ProductName string.
		/// </summary>
		public string ProductVersion { get; set; }

		/// <summary>
		/// This field is for system specific initialization if any.
		/// 
		/// If provided then the structure will be located in <System>/eos_<system>.h.
		/// The structure will be named EOS_<System>_InitializeOptions.
		/// </summary>
		public IntPtr SystemInitializeOptions { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct InitializeOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private AllocateMemoryFunc m_AllocateMemoryFunction;
		private ReallocateMemoryFunc m_ReallocateMemoryFunction;
		private ReleaseMemoryFunc m_ReleaseMemoryFunction;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ProductName;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ProductVersion;
		private IntPtr m_Reserved;
		private IntPtr m_SystemInitializeOptions;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public AllocateMemoryFunc AllocateMemoryFunction
		{
			get
			{
				var value = Helper.GetDefault<AllocateMemoryFunc>();
				Helper.TryMarshalGet(m_AllocateMemoryFunction, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AllocateMemoryFunction, value); }
		}

		public ReallocateMemoryFunc ReallocateMemoryFunction
		{
			get
			{
				var value = Helper.GetDefault<ReallocateMemoryFunc>();
				Helper.TryMarshalGet(m_ReallocateMemoryFunction, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ReallocateMemoryFunction, value); }
		}

		public ReleaseMemoryFunc ReleaseMemoryFunction
		{
			get
			{
				var value = Helper.GetDefault<ReleaseMemoryFunc>();
				Helper.TryMarshalGet(m_ReleaseMemoryFunction, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ReleaseMemoryFunction, value); }
		}

		public string ProductName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ProductName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductName, value); }
		}

		public string ProductVersion
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ProductVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductVersion, value); }
		}

		public IntPtr Reserved
		{
			get
			{
				var value = Helper.GetDefault<IntPtr>();
				Helper.TryMarshalGet(m_Reserved, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Reserved, value); }
		}

		public IntPtr SystemInitializeOptions
		{
			get
			{
				var value = Helper.GetDefault<IntPtr>();
				Helper.TryMarshalGet(m_SystemInitializeOptions, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SystemInitializeOptions, value); }
		}

		public void Dispose()
		{
		}
	}
}