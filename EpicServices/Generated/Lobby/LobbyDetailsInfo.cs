// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

namespace Epic.OnlineServices.Lobby
{
	public class LobbyDetailsInfo : ISettable
	{
		/// <summary>
		/// Lobby ID
		/// </summary>
		public string LobbyId { get; set; }

		/// <summary>
		/// The Product User ID of the current owner of the lobby
		/// </summary>
		public ProductUserId LobbyOwnerUserId { get; set; }

		/// <summary>
		/// Permission level of the lobby
		/// </summary>
		public LobbyPermissionLevel PermissionLevel { get; set; }

		/// <summary>
		/// Current available space
		/// </summary>
		public uint AvailableSlots { get; set; }

		/// <summary>
		/// Max allowed members in the lobby
		/// </summary>
		public uint MaxMembers { get; set; }

		/// <summary>
		/// If true, users can invite others to this lobby
		/// </summary>
		public bool AllowInvites { get; set; }

		internal void Set(LobbyDetailsInfoInternal? other)
		{
			if (other != null)
			{
				LobbyId = other.Value.LobbyId;
				LobbyOwnerUserId = other.Value.LobbyOwnerUserId;
				PermissionLevel = other.Value.PermissionLevel;
				AvailableSlots = other.Value.AvailableSlots;
				MaxMembers = other.Value.MaxMembers;
				AllowInvites = other.Value.AllowInvites;
			}
		}

		public void Set(object other)
		{
			Set(other as LobbyDetailsInfoInternal?);
		}
	}

	[System.Runtime.InteropServices.StructLayout(System.Runtime.InteropServices.LayoutKind.Sequential, Pack = 8)]
	internal struct LobbyDetailsInfoInternal : ISettable, System.IDisposable
	{
		private int m_ApiVersion;
		private System.IntPtr m_LobbyId;
		private System.IntPtr m_LobbyOwnerUserId;
		private LobbyPermissionLevel m_PermissionLevel;
		private uint m_AvailableSlots;
		private uint m_MaxMembers;
		private int m_AllowInvites;

		public string LobbyId
		{
			get
			{
				string value;
				Helper.TryMarshalGet(m_LobbyId, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_LobbyId, value);
			}
		}

		public ProductUserId LobbyOwnerUserId
		{
			get
			{
				ProductUserId value;
				Helper.TryMarshalGet(m_LobbyOwnerUserId, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_LobbyOwnerUserId, value);
			}
		}

		public LobbyPermissionLevel PermissionLevel
		{
			get
			{
				return m_PermissionLevel;
			}

			set
			{
				m_PermissionLevel = value;
			}
		}

		public uint AvailableSlots
		{
			get
			{
				return m_AvailableSlots;
			}

			set
			{
				m_AvailableSlots = value;
			}
		}

		public uint MaxMembers
		{
			get
			{
				return m_MaxMembers;
			}

			set
			{
				m_MaxMembers = value;
			}
		}

		public bool AllowInvites
		{
			get
			{
				bool value;
				Helper.TryMarshalGet(m_AllowInvites, out value);
				return value;
			}

			set
			{
				Helper.TryMarshalSet(ref m_AllowInvites, value);
			}
		}

		public void Set(LobbyDetailsInfo other)
		{
			if (other != null)
			{
				m_ApiVersion = LobbyDetails.LobbydetailsInfoApiLatest;
				LobbyId = other.LobbyId;
				LobbyOwnerUserId = other.LobbyOwnerUserId;
				PermissionLevel = other.PermissionLevel;
				AvailableSlots = other.AvailableSlots;
				MaxMembers = other.MaxMembers;
				AllowInvites = other.AllowInvites;
			}
		}

		public void Set(object other)
		{
			Set(other as LobbyDetailsInfo);
		}

		public void Dispose()
		{
		}
	}
}