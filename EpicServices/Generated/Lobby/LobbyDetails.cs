// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	public sealed class LobbyDetails : Handle
	{
		public LobbyDetails(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// Get the product user ID of the current owner for a given lobby
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <returns>
		/// the product user ID for the lobby owner or null if the input parameters are invalid
		/// </returns>
		public ProductUserId GetLobbyOwner(LobbyDetailsGetLobbyOwnerOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsGetLobbyOwnerOptionsInternal>(options);

			var funcResult = EOS_LobbyDetails_GetLobbyOwner(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<ProductUserId>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopyInfo" /> is used to immediately retrieve a copy of lobby information from a given source such as a existing lobby or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutLobbyDetailsInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <seealso cref="LobbyDetailsInfo" />
		/// <seealso cref="LobbyDetailsCopyInfoOptions" />
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outLobbyDetailsInfo">Out parameter used to receive the <see cref="LobbyDetailsInfo" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLobbyDetailsInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyInfo(LobbyDetailsCopyInfoOptions options, out LobbyDetailsInfo outLobbyDetailsInfo)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsCopyInfoOptionsInternal>(options);

			outLobbyDetailsInfo = Helper.GetDefault<LobbyDetailsInfo>();

			var outLobbyDetailsInfoAddress = IntPtr.Zero;

			var funcResult = EOS_LobbyDetails_CopyInfo(InnerHandle, ref optionsInternal, ref outLobbyDetailsInfoAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<LobbyDetailsInfoInternal, LobbyDetailsInfo>(outLobbyDetailsInfoAddress, out outLobbyDetailsInfo))
			{
				EOS_LobbyDetails_Info_Release(outLobbyDetailsInfoAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Get the number of attributes associated with this lobby
		/// </summary>
		/// <param name="options">the Options associated with retrieving the attribute count</param>
		/// <returns>
		/// number of attributes on the lobby or 0 if there is an error
		/// </returns>
		public uint GetAttributeCount(LobbyDetailsGetAttributeCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsGetAttributeCountOptionsInternal>(options);

			var funcResult = EOS_LobbyDetails_GetAttributeCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopyAttributeByIndex" /> is used to immediately retrieve a copy of a lobby attribute from a given source such as a existing lobby or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// <seealso cref="Attribute" />
		/// <seealso cref="LobbyDetailsCopyAttributeByIndexOptions" />
		/// <seealso cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outAttribute">Out parameter used to receive the <see cref="Attribute" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyAttributeByIndex(LobbyDetailsCopyAttributeByIndexOptions options, out Attribute outAttribute)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsCopyAttributeByIndexOptionsInternal>(options);

			outAttribute = Helper.GetDefault<Attribute>();

			var outAttributeAddress = IntPtr.Zero;

			var funcResult = EOS_LobbyDetails_CopyAttributeByIndex(InnerHandle, ref optionsInternal, ref outAttributeAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<AttributeInternal, Attribute>(outAttributeAddress, out outAttribute))
			{
				EOS_Lobby_Attribute_Release(outAttributeAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopyAttributeByKey" /> is used to immediately retrieve a copy of a lobby attribute from a given source such as a existing lobby or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// <seealso cref="Attribute" />
		/// <seealso cref="LobbyDetailsCopyAttributeByKeyOptions" />
		/// <seealso cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outAttribute">Out parameter used to receive the <see cref="Attribute" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyAttributeByKey(LobbyDetailsCopyAttributeByKeyOptions options, out Attribute outAttribute)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsCopyAttributeByKeyOptionsInternal>(options);

			outAttribute = Helper.GetDefault<Attribute>();

			var outAttributeAddress = IntPtr.Zero;

			var funcResult = EOS_LobbyDetails_CopyAttributeByKey(InnerHandle, ref optionsInternal, ref outAttributeAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<AttributeInternal, Attribute>(outAttributeAddress, out outAttribute))
			{
				EOS_Lobby_Attribute_Release(outAttributeAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Get the number of members associated with this lobby
		/// </summary>
		/// <param name="options">the Options associated with retrieving the member count</param>
		/// <returns>
		/// number of members in the existing lobby or 0 if there is an error
		/// </returns>
		public uint GetMemberCount(LobbyDetailsGetMemberCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsGetMemberCountOptionsInternal>(options);

			var funcResult = EOS_LobbyDetails_GetMemberCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="GetMemberByIndex" /> is used to immediately retrieve individual members registered with a lobby.
		/// <seealso cref="GetMemberCount" />
		/// <seealso cref="LobbyDetailsGetMemberByIndexOptions" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <returns>
		/// the product user ID for the registered member at a given index or null if that index is invalid
		/// </returns>
		public ProductUserId GetMemberByIndex(LobbyDetailsGetMemberByIndexOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsGetMemberByIndexOptionsInternal>(options);

			var funcResult = EOS_LobbyDetails_GetMemberByIndex(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<ProductUserId>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="GetMemberAttributeCount" /> is used to immediately retrieve the attribute count for members in a lobby.
		/// <seealso cref="GetMemberCount" />
		/// <seealso cref="LobbyDetailsGetMemberAttributeCountOptions" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <returns>
		/// the number of attributes associated with a given lobby member or 0 if that member is invalid
		/// </returns>
		public uint GetMemberAttributeCount(LobbyDetailsGetMemberAttributeCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsGetMemberAttributeCountOptionsInternal>(options);

			var funcResult = EOS_LobbyDetails_GetMemberAttributeCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopyMemberAttributeByIndex" /> is used to immediately retrieve a copy of a lobby member attribute from an existing lobby.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// <seealso cref="Attribute" />
		/// <seealso cref="LobbyDetailsCopyMemberAttributeByIndexOptions" />
		/// <seealso cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outAttribute">Out parameter used to receive the <see cref="Attribute" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyMemberAttributeByIndex(LobbyDetailsCopyMemberAttributeByIndexOptions options, out Attribute outAttribute)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsCopyMemberAttributeByIndexOptionsInternal>(options);

			outAttribute = Helper.GetDefault<Attribute>();

			var outAttributeAddress = IntPtr.Zero;

			var funcResult = EOS_LobbyDetails_CopyMemberAttributeByIndex(InnerHandle, ref optionsInternal, ref outAttributeAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<AttributeInternal, Attribute>(outAttributeAddress, out outAttribute))
			{
				EOS_Lobby_Attribute_Release(outAttributeAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopyMemberAttributeByKey" /> is used to immediately retrieve a copy of a lobby member attribute from an existing lobby.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutAttribute, must be passed to <see cref="LobbyInterface.Release" /> to release the memory associated with it.
		/// <seealso cref="Attribute" />
		/// <seealso cref="LobbyDetailsCopyMemberAttributeByKeyOptions" />
		/// <seealso cref="LobbyInterface.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outAttribute">Out parameter used to receive the <see cref="Attribute" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyMemberAttributeByKey(LobbyDetailsCopyMemberAttributeByKeyOptions options, out Attribute outAttribute)
		{
			var optionsInternal = Helper.CopyProperties<LobbyDetailsCopyMemberAttributeByKeyOptionsInternal>(options);

			outAttribute = Helper.GetDefault<Attribute>();

			var outAttributeAddress = IntPtr.Zero;

			var funcResult = EOS_LobbyDetails_CopyMemberAttributeByKey(InnerHandle, ref optionsInternal, ref outAttributeAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<AttributeInternal, Attribute>(outAttributeAddress, out outAttribute))
			{
				EOS_Lobby_Attribute_Release(outAttributeAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Release the memory associated with a single lobby. This must be called on data retrieved from <see cref="LobbySearch.CopySearchResultByIndex" />.
		/// <seealso cref="LobbySearch.CopySearchResultByIndex" />
		/// </summary>
		/// <param name="lobbyHandle">- The lobby handle to release</param>
		public void Release()
		{
			EOS_LobbyDetails_Release(InnerHandle);
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_Attribute_Release(IntPtr lobbyAttribute);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_LobbyDetails_Info_Release(IntPtr lobbyDetailsInfo);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_LobbyDetails_Release(IntPtr lobbyHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyDetails_CopyMemberAttributeByKey(IntPtr handle, ref LobbyDetailsCopyMemberAttributeByKeyOptionsInternal options, ref IntPtr outAttribute);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyDetails_CopyMemberAttributeByIndex(IntPtr handle, ref LobbyDetailsCopyMemberAttributeByIndexOptionsInternal options, ref IntPtr outAttribute);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_LobbyDetails_GetMemberAttributeCount(IntPtr handle, ref LobbyDetailsGetMemberAttributeCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern IntPtr EOS_LobbyDetails_GetMemberByIndex(IntPtr handle, ref LobbyDetailsGetMemberByIndexOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_LobbyDetails_GetMemberCount(IntPtr handle, ref LobbyDetailsGetMemberCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyDetails_CopyAttributeByKey(IntPtr handle, ref LobbyDetailsCopyAttributeByKeyOptionsInternal options, ref IntPtr outAttribute);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyDetails_CopyAttributeByIndex(IntPtr handle, ref LobbyDetailsCopyAttributeByIndexOptionsInternal options, ref IntPtr outAttribute);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_LobbyDetails_GetAttributeCount(IntPtr handle, ref LobbyDetailsGetAttributeCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyDetails_CopyInfo(IntPtr handle, ref LobbyDetailsCopyInfoOptionsInternal options, ref IntPtr outLobbyDetailsInfo);

		[DllImport(Config.BinaryName)]
		private static extern IntPtr EOS_LobbyDetails_GetLobbyOwner(IntPtr handle, ref LobbyDetailsGetLobbyOwnerOptionsInternal options);
	}
}