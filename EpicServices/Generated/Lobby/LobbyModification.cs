// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	public sealed class LobbyModification : Handle
	{
		public LobbyModification(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// Set the permissions associated with this lobby.
		/// The permissions range from "public" to "invite only" and are described by <see cref="LobbyPermissionLevel" />
		/// </summary>
		/// <param name="options">Options associated with the permission level of the lobby</param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetPermissionLevel(LobbyModificationSetPermissionLevelOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyModificationSetPermissionLevelOptionsInternal>(options);

			var funcResult = EOS_LobbyModification_SetPermissionLevel(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Set the maximum number of members allowed in this lobby.
		/// When updating the lobby, it is not possible to reduce this number below the current number of existing members
		/// </summary>
		/// <param name="options">Options associated with max number of members in this lobby</param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result SetMaxMembers(LobbyModificationSetMaxMembersOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyModificationSetMaxMembersOptionsInternal>(options);

			var funcResult = EOS_LobbyModification_SetMaxMembers(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Associate an attribute with this lobby
		/// An attribute is something may be public or private with the lobby.
		/// If public, it can be queried for in a search, otherwise the data remains known only to lobby members
		/// </summary>
		/// <param name="options">Options to set the attribute and its visibility state</param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the attribute is missing information or otherwise invalid
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result AddAttribute(LobbyModificationAddAttributeOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyModificationAddAttributeOptionsInternal>(options);

			var funcResult = EOS_LobbyModification_AddAttribute(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Remove an attribute associated with the lobby
		/// </summary>
		/// <param name="options">Specify the key of the attribute to remove</param>
		/// <returns>
		/// <see cref="Result.Success" /> if removing this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the key is null or empty
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result RemoveAttribute(LobbyModificationRemoveAttributeOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyModificationRemoveAttributeOptionsInternal>(options);

			var funcResult = EOS_LobbyModification_RemoveAttribute(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Associate an attribute with a member of the lobby
		/// Lobby member data is always private to the lobby
		/// </summary>
		/// <param name="options">Options to set the attribute and its visibility state</param>
		/// <returns>
		/// <see cref="Result.Success" /> if setting this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the attribute is missing information or otherwise invalid
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result AddMemberAttribute(LobbyModificationAddMemberAttributeOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyModificationAddMemberAttributeOptionsInternal>(options);

			var funcResult = EOS_LobbyModification_AddMemberAttribute(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Remove an attribute associated with of member of the lobby
		/// </summary>
		/// <param name="options">Specify the key of the member attribute to remove</param>
		/// <returns>
		/// <see cref="Result.Success" /> if removing this parameter was successful
		/// <see cref="Result.InvalidParameters" /> if the key is null or empty
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result RemoveMemberAttribute(LobbyModificationRemoveMemberAttributeOptions options)
		{
			var optionsInternal = Helper.CopyProperties<LobbyModificationRemoveMemberAttributeOptionsInternal>(options);

			var funcResult = EOS_LobbyModification_RemoveMemberAttribute(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Handle to the calls responsible for creating a search object
		/// </summary>
		public void Release()
		{
			EOS_LobbyModification_Release(InnerHandle);
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_LobbyModification_Release(IntPtr lobbyModificationHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyModification_RemoveMemberAttribute(IntPtr handle, ref LobbyModificationRemoveMemberAttributeOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyModification_AddMemberAttribute(IntPtr handle, ref LobbyModificationAddMemberAttributeOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyModification_RemoveAttribute(IntPtr handle, ref LobbyModificationRemoveAttributeOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyModification_AddAttribute(IntPtr handle, ref LobbyModificationAddAttributeOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyModification_SetMaxMembers(IntPtr handle, ref LobbyModificationSetMaxMembersOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_LobbyModification_SetPermissionLevel(IntPtr handle, ref LobbyModificationSetPermissionLevelOptionsInternal options);
	}
}