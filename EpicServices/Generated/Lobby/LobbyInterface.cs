// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Lobby
{
	public sealed class LobbyInterface : Handle
	{
		public LobbyInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.CopySearchResultByIndex" /> API.
		/// </summary>
		public const int LobbysearchCopysearchresultbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.GetSearchResultCount" /> API.
		/// </summary>
		public const int LobbysearchGetsearchresultcountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.SetMaxResults" /> API.
		/// </summary>
		public const int LobbysearchSetmaxresultsApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.RemoveParameter" /> API.
		/// </summary>
		public const int LobbysearchRemoveparameterApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.SetParameter" /> API.
		/// </summary>
		public const int LobbysearchSetparameterApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.SetTargetUserId" /> API.
		/// </summary>
		public const int LobbysearchSettargetuseridApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.SetLobbyId" /> API.
		/// </summary>
		public const int LobbysearchSetlobbyidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbySearch.Find" /> API.
		/// </summary>
		public const int LobbysearchFindApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.GetMemberByIndex" /> API.
		/// </summary>
		public const int LobbydetailsGetmemberbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.GetMemberCount" /> API.
		/// </summary>
		public const int LobbydetailsGetmembercountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.CopyMemberAttributeByKey" /> API.
		/// </summary>
		public const int LobbydetailsCopymemberattributebykeyApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.CopyMemberAttributeByIndex" /> API.
		/// </summary>
		public const int LobbydetailsCopymemberattributebyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.GetMemberAttributeCount" /> API.
		/// </summary>
		public const int LobbydetailsGetmemberattributecountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.CopyAttributeByKey" /> API.
		/// </summary>
		public const int LobbydetailsCopyattributebykeyApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.CopyAttributeByIndex" /> API.
		/// </summary>
		public const int LobbydetailsCopyattributebyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.GetAttributeCount" /> API.
		/// </summary>
		public const int LobbydetailsGetattributecountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.CopyInfo" /> API.
		/// </summary>
		public const int LobbydetailsCopyinfoApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyDetails.GetLobbyOwner" /> API.
		/// </summary>
		public const int LobbydetailsGetlobbyownerApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyModification.RemoveMemberAttribute" /> API.
		/// </summary>
		public const int LobbymodificationRemovememberattributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyModification.AddMemberAttribute" /> API.
		/// </summary>
		public const int LobbymodificationAddmemberattributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyModification.RemoveAttribute" /> API.
		/// </summary>
		public const int LobbymodificationRemoveattributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyModification.AddAttribute" /> API.
		/// </summary>
		public const int LobbymodificationAddattributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyModification.SetMaxMembers" /> API.
		/// </summary>
		public const int LobbymodificationSetmaxmembersApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LobbyModification.SetPermissionLevel" /> API.
		/// </summary>
		public const int LobbymodificationSetpermissionlevelApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="Attribute" /> struct.
		/// </summary>
		public const int AttributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AttributeData" /> struct.
		/// </summary>
		public const int AttributedataApiLatest = 1;

		/// <summary>
		/// Search for a match with min free space (value is int)
		/// </summary>
		public const string SearchMinslotsavailable = "minslotsavailable";

		/// <summary>
		/// Search for lobbies that contain at least this number of members (value is int)
		/// </summary>
		public const string SearchMincurrentmembers = "mincurrentmembers";

		/// <summary>
		/// The most recent version of the <see cref="CopyLobbyDetailsHandle" /> API.
		/// </summary>
		public const int CopylobbydetailshandleApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="GetInviteIdByIndex" /> API.
		/// </summary>
		public const int GetinviteidbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="GetInviteCount" /> API.
		/// </summary>
		public const int GetinvitecountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryInvites" /> API.
		/// </summary>
		public const int QueryinvitesApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="RejectInvite" /> API.
		/// </summary>
		public const int RejectinviteApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SendInvite" /> API.
		/// </summary>
		public const int SendinviteApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CreateLobbySearch" /> API.
		/// </summary>
		public const int CreatelobbysearchApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyLobbyDetailsHandleByUiEventId" /> API.
		/// </summary>
		public const int CopylobbydetailshandlebyuieventidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyLobbyDetailsHandleByInviteId" /> API.
		/// </summary>
		public const int CopylobbydetailshandlebyinviteidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyJoinLobbyAccepted" /> API.
		/// </summary>
		public const int AddnotifyjoinlobbyacceptedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyLobbyInviteAccepted" /> API.
		/// </summary>
		public const int AddnotifylobbyinviteacceptedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyLobbyInviteReceived" /> API.
		/// </summary>
		public const int AddnotifylobbyinvitereceivedApiLatest = 1;

		/// <summary>
		/// Max length of an invite ID
		/// </summary>
		public const int InviteidMaxLength = 64;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyLobbyMemberStatusReceived" /> API.
		/// </summary>
		public const int AddnotifylobbymemberstatusreceivedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyLobbyMemberUpdateReceived" /> API.
		/// </summary>
		public const int AddnotifylobbymemberupdatereceivedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyLobbyUpdateReceived" /> API.
		/// </summary>
		public const int AddnotifylobbyupdatereceivedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="KickMember" /> API.
		/// </summary>
		public const int KickmemberApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="PromoteMember" /> API.
		/// </summary>
		public const int PromotememberApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="UpdateLobby" /> API.
		/// </summary>
		public const int UpdatelobbyApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="UpdateLobbyModification" /> API.
		/// </summary>
		public const int UpdatelobbymodificationApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="LeaveLobby" /> API.
		/// </summary>
		public const int LeavelobbyApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="JoinLobby" /> API.
		/// </summary>
		public const int JoinlobbyApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="DestroyLobby" /> API.
		/// </summary>
		public const int DestroylobbyApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CreateLobby" /> API.
		/// </summary>
		public const int CreatelobbyApiLatest = 2;

		public const int LobbydetailsInfoApiLatest = 1;

		/// <summary>
		/// Maximum length of the name of the attribute associated with the lobby
		/// </summary>
		public const int LobbymodificationMaxAttributeLength = 64;

		/// <summary>
		/// Maximum number of attributes allowed on the lobby
		/// </summary>
		public const int LobbymodificationMaxAttributes = 64;

		public const int MaxSearchResults = 200;

		public const int MaxLobbyMembers = 64;

		/// <summary>
		/// All lobbies are referenced by a unique lobby ID
		/// </summary>
		public const int MaxLobbies = 4;

		/// <summary>
		/// Creates a lobby and adds the user to the lobby membership. There is no data associated with the lobby at the start and can be added vis <see cref="UpdateLobbyModification" />
		/// </summary>
		/// <param name="options">Required fields for the creation of a lobby such as a user count and its starting advertised state</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the create operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the creation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.LimitExceeded" /> if the number of allowed lobbies is exceeded
		/// </returns>
		public void CreateLobby(CreateLobbyOptions options, object clientData, OnCreateLobbyCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<CreateLobbyOptionsInternal>(options);

			var completionDelegateInternal = new OnCreateLobbyCallbackInternal(OnCreateLobby);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_CreateLobby(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Destroy a lobby given a lobby ID
		/// </summary>
		/// <param name="options">Structure containing information about the lobby to be destroyed</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the destroy operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the destroy completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.AlreadyPending" /> if the lobby is already marked for destroy
		/// <see cref="Result.NotFound" /> if the lobby to be destroyed does not exist
		/// </returns>
		public void DestroyLobby(DestroyLobbyOptions options, object clientData, OnDestroyLobbyCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<DestroyLobbyOptionsInternal>(options);

			var completionDelegateInternal = new OnDestroyLobbyCallbackInternal(OnDestroyLobby);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_DestroyLobby(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Join a lobby, creating a local instance under a given lobby ID. Backend will validate various conditions to make sure it is possible to join the lobby.
		/// </summary>
		/// <param name="options">Structure containing information about the lobby to be joined</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the join operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the destroy completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void JoinLobby(JoinLobbyOptions options, object clientData, OnJoinLobbyCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<JoinLobbyOptionsInternal>(options);

			var completionDelegateInternal = new OnJoinLobbyCallbackInternal(OnJoinLobby);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_JoinLobby(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Leave a lobby given a lobby ID
		/// </summary>
		/// <param name="options">Structure containing information about the lobby to be left</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the leave operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the leave completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.AlreadyPending" /> if the lobby is already marked for leave
		/// <see cref="Result.NotFound" /> if a lobby to be left does not exist
		/// </returns>
		public void LeaveLobby(LeaveLobbyOptions options, object clientData, OnLeaveLobbyCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<LeaveLobbyOptionsInternal>(options);

			var completionDelegateInternal = new OnLeaveLobbyCallbackInternal(OnLeaveLobby);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_LeaveLobby(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Creates a lobby modification handle (<see cref="LobbyModification" />). The lobby modification handle is used to modify an existing lobby and can be applied with <see cref="UpdateLobby" />.
		/// The <see cref="LobbyModification" /> must be released by calling <see cref="LobbyModification.Release" /> once it is no longer needed.
		/// <seealso cref="LobbyModification.Release" />
		/// <seealso cref="UpdateLobby" />
		/// <seealso cref="LobbyModification" />
		/// </summary>
		/// <param name="options">Required fields such as lobby ID</param>
		/// <param name="outLobbyModificationHandle">Pointer to a Lobby Modification Handle only set if successful</param>
		/// <returns>
		/// <see cref="Result.Success" /> if we successfully created the Lobby Modification Handle pointed at in OutLobbyModificationHandle, or an error result if the input data was invalid
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public Result UpdateLobbyModification(UpdateLobbyModificationOptions options, out LobbyModification outLobbyModificationHandle)
		{
			var optionsInternal = Helper.CopyProperties<UpdateLobbyModificationOptionsInternal>(options);

			outLobbyModificationHandle = Helper.GetDefault<LobbyModification>();

			var outLobbyModificationHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Lobby_UpdateLobbyModification(InnerHandle, ref optionsInternal, ref outLobbyModificationHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outLobbyModificationHandleAddress, out outLobbyModificationHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Update a lobby given a lobby modification handle created by <see cref="UpdateLobbyModification" />
		/// </summary>
		/// <param name="options">Structure containing information about the lobby to be updated</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the update operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the update completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.LobbyNotOwner" /> if the lobby modification contains modifications that are only allowed by the owner
		/// <see cref="Result.NotFound" /> if the lobby to update does not exist
		/// </returns>
		public void UpdateLobby(UpdateLobbyOptions options, object clientData, OnUpdateLobbyCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<UpdateLobbyOptionsInternal>(options);

			var completionDelegateInternal = new OnUpdateLobbyCallbackInternal(OnUpdateLobby);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_UpdateLobby(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Promote an existing member of the lobby to owner, allowing them to make lobby data modifications
		/// </summary>
		/// <param name="options">Structure containing information about the lobby and member to be promoted</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the promotion operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the promote completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.LobbyNotOwner" /> if the calling user is not the owner of the lobby
		/// <see cref="Result.NotFound" /> if the lobby of interest does not exist
		/// </returns>
		public void PromoteMember(PromoteMemberOptions options, object clientData, OnPromoteMemberCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<PromoteMemberOptionsInternal>(options);

			var completionDelegateInternal = new OnPromoteMemberCallbackInternal(OnPromoteMember);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_PromoteMember(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Kick an existing member from the lobby
		/// </summary>
		/// <param name="options">Structure containing information about the lobby and member to be kicked</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the kick operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the kick completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.LobbyNotOwner" /> if the calling user is not the owner of the lobby
		/// <see cref="Result.NotFound" /> if a lobby of interest does not exist
		/// </returns>
		public void KickMember(KickMemberOptions options, object clientData, OnKickMemberCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<KickMemberOptionsInternal>(options);

			var completionDelegateInternal = new OnKickMemberCallbackInternal(OnKickMember);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_KickMember(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Register to receive notifications when a lobby owner updates the attributes associated with the lobby.
		/// @note must call RemoveNotifyLobbyUpdateReceived to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyLobbyUpdateReceived(AddNotifyLobbyUpdateReceivedOptions options, object clientData, OnLobbyUpdateReceivedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyLobbyUpdateReceivedOptionsInternal>(options);

			var notificationFnInternal = new OnLobbyUpdateReceivedCallbackInternal(OnLobbyUpdateReceived);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Lobby_AddNotifyLobbyUpdateReceived(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when a lobby changes its data.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyLobbyUpdateReceived(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Lobby_RemoveNotifyLobbyUpdateReceived(InnerHandle, inId);
		}

		/// <summary>
		/// Register to receive notifications when a lobby member updates the attributes associated with themselves inside the lobby.
		/// @note must call RemoveNotifyLobbyMemberUpdateReceived to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyLobbyMemberUpdateReceived(AddNotifyLobbyMemberUpdateReceivedOptions options, object clientData, OnLobbyMemberUpdateReceivedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyLobbyMemberUpdateReceivedOptionsInternal>(options);

			var notificationFnInternal = new OnLobbyMemberUpdateReceivedCallbackInternal(OnLobbyMemberUpdateReceived);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when lobby members change their data.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyLobbyMemberUpdateReceived(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(InnerHandle, inId);
		}

		/// <summary>
		/// Register to receive notifications about the changing status of lobby members.
		/// @note must call RemoveNotifyLobbyMemberStatusReceived to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyLobbyMemberStatusReceived(AddNotifyLobbyMemberStatusReceivedOptions options, object clientData, OnLobbyMemberStatusReceivedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyLobbyMemberStatusReceivedOptionsInternal>(options);

			var notificationFnInternal = new OnLobbyMemberStatusReceivedCallbackInternal(OnLobbyMemberStatusReceived);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Lobby_AddNotifyLobbyMemberStatusReceived(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when lobby members status change.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyLobbyMemberStatusReceived(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(InnerHandle, inId);
		}

		/// <summary>
		/// Send an invite to another user. User must be a member of the lobby or else the call will fail
		/// </summary>
		/// <param name="options">Structure containing information about the lobby and user to invite</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the send invite operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the send invite completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.NotFound" /> if the lobby to send the invite from does not exist
		/// </returns>
		public void SendInvite(SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<SendInviteOptionsInternal>(options);

			var completionDelegateInternal = new OnSendInviteCallbackInternal(OnSendInvite);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_SendInvite(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Reject an invite from another user.
		/// </summary>
		/// <param name="options">Structure containing information about the invite to reject</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the reject invite operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the invite rejection completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.NotFound" /> if the invite does not exist
		/// </returns>
		public void RejectInvite(RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<RejectInviteOptionsInternal>(options);

			var completionDelegateInternal = new OnRejectInviteCallbackInternal(OnRejectInvite);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_RejectInvite(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Retrieve all existing invites for a single user
		/// </summary>
		/// <param name="options">Structure containing information about the invites to query</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the query invites operation completes, either successfully or in error</param>
		public void QueryInvites(QueryInvitesOptions options, object clientData, OnQueryInvitesCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryInvitesOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryInvitesCallbackInternal(OnQueryInvites);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Lobby_QueryInvites(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Get the number of known invites for a given user
		/// </summary>
		/// <param name="options">the Options associated with retrieving the current invite count</param>
		/// <returns>
		/// number of known invites for a given user or 0 if there is an error
		/// </returns>
		public uint GetInviteCount(GetInviteCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetInviteCountOptionsInternal>(options);

			var funcResult = EOS_Lobby_GetInviteCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Retrieve an invite ID from a list of active invites for a given user
		/// <seealso cref="GetInviteCount" />
		/// <seealso cref="CopyLobbyDetailsHandleByInviteId" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the input is valid and an invite ID was returned
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.NotFound" /> if the invite doesn't exist
		/// </returns>
		public Result GetInviteIdByIndex(GetInviteIdByIndexOptions options, System.Text.StringBuilder outBuffer, ref int inOutBufferLength)
		{
			var optionsInternal = Helper.CopyProperties<GetInviteIdByIndexOptionsInternal>(options);

			var funcResult = EOS_Lobby_GetInviteIdByIndex(InnerHandle, ref optionsInternal, outBuffer, ref inOutBufferLength);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Create a lobby search handle. This handle may be modified to include various search parameters.
		/// Searching is possible in three methods, all mutually exclusive
		/// - set the lobby ID to find a specific lobby
		/// - set the target user ID to find a specific user
		/// - set lobby parameters to find an array of lobbies that match the search criteria (not available yet)
		/// </summary>
		/// <param name="options">Structure containing required parameters such as the maximum number of search results</param>
		/// <param name="outLobbySearchHandle">The new search handle or null if there was an error creating the search handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the search creation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public Result CreateLobbySearch(CreateLobbySearchOptions options, out LobbySearch outLobbySearchHandle)
		{
			var optionsInternal = Helper.CopyProperties<CreateLobbySearchOptionsInternal>(options);

			outLobbySearchHandle = Helper.GetDefault<LobbySearch>();

			var outLobbySearchHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Lobby_CreateLobbySearch(InnerHandle, ref optionsInternal, ref outLobbySearchHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outLobbySearchHandleAddress, out outLobbySearchHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Register to receive notifications about lobby invites sent to local users.
		/// @note must call RemoveNotifyLobbyInviteReceived to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyLobbyInviteReceived(AddNotifyLobbyInviteReceivedOptions options, object clientData, OnLobbyInviteReceivedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyLobbyInviteReceivedOptionsInternal>(options);

			var notificationFnInternal = new OnLobbyInviteReceivedCallbackInternal(OnLobbyInviteReceived);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Lobby_AddNotifyLobbyInviteReceived(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when a user receives a lobby invitation.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyLobbyInviteReceived(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Lobby_RemoveNotifyLobbyInviteReceived(InnerHandle, inId);
		}

		/// <summary>
		/// Register to receive notifications about lobby invites accepted by local user via the overlay.
		/// @note must call RemoveNotifyLobbyInviteAccepted to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyLobbyInviteAccepted(AddNotifyLobbyInviteAcceptedOptions options, object clientData, OnLobbyInviteAcceptedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyLobbyInviteAcceptedOptionsInternal>(options);

			var notificationFnInternal = new OnLobbyInviteAcceptedCallbackInternal(OnLobbyInviteAccepted);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Lobby_AddNotifyLobbyInviteAccepted(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when a user accepts a lobby invitation via the overlay.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyLobbyInviteAccepted(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Lobby_RemoveNotifyLobbyInviteAccepted(InnerHandle, inId);
		}

		/// <summary>
		/// Register to receive notifications about lobby join game accepted by local user via the overlay.
		/// @note must call RemoveNotifyJoinLobbyAccepted to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyJoinLobbyAccepted(AddNotifyJoinLobbyAcceptedOptions options, object clientData, OnJoinLobbyAcceptedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyJoinLobbyAcceptedOptionsInternal>(options);

			var notificationFnInternal = new OnJoinLobbyAcceptedCallbackInternal(OnJoinLobbyAccepted);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Lobby_AddNotifyJoinLobbyAccepted(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when a user accepts a lobby invitation via the overlay.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyJoinLobbyAccepted(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Lobby_RemoveNotifyJoinLobbyAccepted(InnerHandle, inId);
		}

		/// <summary>
		/// <see cref="CopyLobbyDetailsHandleByInviteId" /> is used to immediately retrieve a handle to the lobby information from after notification of an invite
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutLobbyDetailsHandle, must be passed to <see cref="LobbyDetails.Release" /> to release the memory associated with it.
		/// <seealso cref="CopyLobbyDetailsHandleByInviteIdOptions" />
		/// <seealso cref="LobbyDetails.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outLobbyDetailsHandle">out parameter used to receive the lobby handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLobbyDetailsHandle
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid invite ID or a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> If the invite ID cannot be found
		/// </returns>
		public Result CopyLobbyDetailsHandleByInviteId(CopyLobbyDetailsHandleByInviteIdOptions options, out LobbyDetails outLobbyDetailsHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopyLobbyDetailsHandleByInviteIdOptionsInternal>(options);

			outLobbyDetailsHandle = Helper.GetDefault<LobbyDetails>();

			var outLobbyDetailsHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Lobby_CopyLobbyDetailsHandleByInviteId(InnerHandle, ref optionsInternal, ref outLobbyDetailsHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outLobbyDetailsHandleAddress, out outLobbyDetailsHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopyLobbyDetailsHandleByUiEventId" /> is used to immediately retrieve a handle to the lobby information from after notification of an join game
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutLobbyDetailsHandle, must be passed to <see cref="LobbyDetails.Release" /> to release the memory associated with it.
		/// <seealso cref="CopyLobbyDetailsHandleByUiEventIdOptions" />
		/// <seealso cref="LobbyDetails.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outLobbyDetailsHandle">out parameter used to receive the lobby handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutLobbyDetailsHandle
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid ui event ID
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> If the invite ID cannot be found
		/// </returns>
		public Result CopyLobbyDetailsHandleByUiEventId(CopyLobbyDetailsHandleByUiEventIdOptions options, out LobbyDetails outLobbyDetailsHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopyLobbyDetailsHandleByUiEventIdOptionsInternal>(options);

			outLobbyDetailsHandle = Helper.GetDefault<LobbyDetails>();

			var outLobbyDetailsHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(InnerHandle, ref optionsInternal, ref outLobbyDetailsHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outLobbyDetailsHandleAddress, out outLobbyDetailsHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Create a handle to an existing lobby.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutLobbyDetailsHandle, must be passed to <see cref="LobbyDetails.Release" /> to release the memory associated with it.
		/// </summary>
		/// <param name="options">Structure containing information about the lobby to retrieve</param>
		/// <param name="outLobbyDetailsHandle">The new active lobby handle or null if there was an error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the lobby handle was created successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if the lobby doesn't exist
		/// </returns>
		public Result CopyLobbyDetailsHandle(CopyLobbyDetailsHandleOptions options, out LobbyDetails outLobbyDetailsHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopyLobbyDetailsHandleOptionsInternal>(options);

			outLobbyDetailsHandle = Helper.GetDefault<LobbyDetails>();

			var outLobbyDetailsHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Lobby_CopyLobbyDetailsHandle(InnerHandle, ref optionsInternal, ref outLobbyDetailsHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outLobbyDetailsHandleAddress, out outLobbyDetailsHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback]
		internal static void OnJoinLobbyAccepted(IntPtr address)
		{
			OnJoinLobbyAcceptedCallback callback = null;
			JoinLobbyAcceptedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnJoinLobbyAcceptedCallback, JoinLobbyAcceptedCallbackInfoInternal, JoinLobbyAcceptedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnLobbyInviteAccepted(IntPtr address)
		{
			OnLobbyInviteAcceptedCallback callback = null;
			LobbyInviteAcceptedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnLobbyInviteAcceptedCallback, LobbyInviteAcceptedCallbackInfoInternal, LobbyInviteAcceptedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnLobbyInviteReceived(IntPtr address)
		{
			OnLobbyInviteReceivedCallback callback = null;
			LobbyInviteReceivedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnLobbyInviteReceivedCallback, LobbyInviteReceivedCallbackInfoInternal, LobbyInviteReceivedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnQueryInvites(IntPtr address)
		{
			OnQueryInvitesCallback callback = null;
			QueryInvitesCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryInvitesCallback, QueryInvitesCallbackInfoInternal, QueryInvitesCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnRejectInvite(IntPtr address)
		{
			OnRejectInviteCallback callback = null;
			RejectInviteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnRejectInviteCallback, RejectInviteCallbackInfoInternal, RejectInviteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnSendInvite(IntPtr address)
		{
			OnSendInviteCallback callback = null;
			SendInviteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnSendInviteCallback, SendInviteCallbackInfoInternal, SendInviteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnLobbyMemberStatusReceived(IntPtr address)
		{
			OnLobbyMemberStatusReceivedCallback callback = null;
			LobbyMemberStatusReceivedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnLobbyMemberStatusReceivedCallback, LobbyMemberStatusReceivedCallbackInfoInternal, LobbyMemberStatusReceivedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnLobbyMemberUpdateReceived(IntPtr address)
		{
			OnLobbyMemberUpdateReceivedCallback callback = null;
			LobbyMemberUpdateReceivedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnLobbyMemberUpdateReceivedCallback, LobbyMemberUpdateReceivedCallbackInfoInternal, LobbyMemberUpdateReceivedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnLobbyUpdateReceived(IntPtr address)
		{
			OnLobbyUpdateReceivedCallback callback = null;
			LobbyUpdateReceivedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnLobbyUpdateReceivedCallback, LobbyUpdateReceivedCallbackInfoInternal, LobbyUpdateReceivedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnKickMember(IntPtr address)
		{
			OnKickMemberCallback callback = null;
			KickMemberCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnKickMemberCallback, KickMemberCallbackInfoInternal, KickMemberCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnPromoteMember(IntPtr address)
		{
			OnPromoteMemberCallback callback = null;
			PromoteMemberCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnPromoteMemberCallback, PromoteMemberCallbackInfoInternal, PromoteMemberCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnUpdateLobby(IntPtr address)
		{
			OnUpdateLobbyCallback callback = null;
			UpdateLobbyCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnUpdateLobbyCallback, UpdateLobbyCallbackInfoInternal, UpdateLobbyCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnLeaveLobby(IntPtr address)
		{
			OnLeaveLobbyCallback callback = null;
			LeaveLobbyCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnLeaveLobbyCallback, LeaveLobbyCallbackInfoInternal, LeaveLobbyCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnJoinLobby(IntPtr address)
		{
			OnJoinLobbyCallback callback = null;
			JoinLobbyCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnJoinLobbyCallback, JoinLobbyCallbackInfoInternal, JoinLobbyCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnDestroyLobby(IntPtr address)
		{
			OnDestroyLobbyCallback callback = null;
			DestroyLobbyCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnDestroyLobbyCallback, DestroyLobbyCallbackInfoInternal, DestroyLobbyCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnCreateLobby(IntPtr address)
		{
			OnCreateLobbyCallback callback = null;
			CreateLobbyCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnCreateLobbyCallback, CreateLobbyCallbackInfoInternal, CreateLobbyCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_Attribute_Release(IntPtr lobbyAttribute);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Lobby_CopyLobbyDetailsHandle(IntPtr handle, ref CopyLobbyDetailsHandleOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Lobby_CopyLobbyDetailsHandleByUiEventId(IntPtr handle, ref CopyLobbyDetailsHandleByUiEventIdOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Lobby_CopyLobbyDetailsHandleByInviteId(IntPtr handle, ref CopyLobbyDetailsHandleByInviteIdOptionsInternal options, ref IntPtr outLobbyDetailsHandle);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RemoveNotifyJoinLobbyAccepted(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Lobby_AddNotifyJoinLobbyAccepted(IntPtr handle, ref AddNotifyJoinLobbyAcceptedOptionsInternal options, IntPtr clientData, OnJoinLobbyAcceptedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RemoveNotifyLobbyInviteAccepted(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Lobby_AddNotifyLobbyInviteAccepted(IntPtr handle, ref AddNotifyLobbyInviteAcceptedOptionsInternal options, IntPtr clientData, OnLobbyInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RemoveNotifyLobbyInviteReceived(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Lobby_AddNotifyLobbyInviteReceived(IntPtr handle, ref AddNotifyLobbyInviteReceivedOptionsInternal options, IntPtr clientData, OnLobbyInviteReceivedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Lobby_CreateLobbySearch(IntPtr handle, ref CreateLobbySearchOptionsInternal options, ref IntPtr outLobbySearchHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Lobby_GetInviteIdByIndex(IntPtr handle, ref GetInviteIdByIndexOptionsInternal options, System.Text.StringBuilder outBuffer, ref int inOutBufferLength);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_Lobby_GetInviteCount(IntPtr handle, ref GetInviteCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_QueryInvites(IntPtr handle, ref QueryInvitesOptionsInternal options, IntPtr clientData, OnQueryInvitesCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RejectInvite(IntPtr handle, ref RejectInviteOptionsInternal options, IntPtr clientData, OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_SendInvite(IntPtr handle, ref SendInviteOptionsInternal options, IntPtr clientData, OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RemoveNotifyLobbyMemberStatusReceived(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Lobby_AddNotifyLobbyMemberStatusReceived(IntPtr handle, ref AddNotifyLobbyMemberStatusReceivedOptionsInternal options, IntPtr clientData, OnLobbyMemberStatusReceivedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RemoveNotifyLobbyMemberUpdateReceived(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Lobby_AddNotifyLobbyMemberUpdateReceived(IntPtr handle, ref AddNotifyLobbyMemberUpdateReceivedOptionsInternal options, IntPtr clientData, OnLobbyMemberUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_RemoveNotifyLobbyUpdateReceived(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Lobby_AddNotifyLobbyUpdateReceived(IntPtr handle, ref AddNotifyLobbyUpdateReceivedOptionsInternal options, IntPtr clientData, OnLobbyUpdateReceivedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_KickMember(IntPtr handle, ref KickMemberOptionsInternal options, IntPtr clientData, OnKickMemberCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_PromoteMember(IntPtr handle, ref PromoteMemberOptionsInternal options, IntPtr clientData, OnPromoteMemberCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_UpdateLobby(IntPtr handle, ref UpdateLobbyOptionsInternal options, IntPtr clientData, OnUpdateLobbyCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Lobby_UpdateLobbyModification(IntPtr handle, ref UpdateLobbyModificationOptionsInternal options, ref IntPtr outLobbyModificationHandle);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_LeaveLobby(IntPtr handle, ref LeaveLobbyOptionsInternal options, IntPtr clientData, OnLeaveLobbyCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_JoinLobby(IntPtr handle, ref JoinLobbyOptionsInternal options, IntPtr clientData, OnJoinLobbyCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_DestroyLobby(IntPtr handle, ref DestroyLobbyOptionsInternal options, IntPtr clientData, OnDestroyLobbyCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Lobby_CreateLobby(IntPtr handle, ref CreateLobbyOptionsInternal options, IntPtr clientData, OnCreateLobbyCallbackInternal completionDelegate);
	}
}