// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single item ownership associated with an account. This structure is
	/// returned as part of the <see cref="QueryOwnershipCallbackInfo" /> structure.
	/// </summary>
	public class ItemOwnership
	{
		/// <summary>
		/// API Version: Set this to <see cref="EcomInterface.ItemownershipApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return EcomInterface.ItemownershipApiLatest; } }

		/// <summary>
		/// ID of the catalog item
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Is this catalog item owned by the local user
		/// </summary>
		public OwnershipStatus OwnershipStatus { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct ItemOwnershipInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Id;
		private OwnershipStatus m_OwnershipStatus;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string Id
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Id, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Id, value); }
		}

		public OwnershipStatus OwnershipStatus
		{
			get
			{
				var value = Helper.GetDefault<OwnershipStatus>();
				Helper.TryMarshalGet(m_OwnershipStatus, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_OwnershipStatus, value); }
		}

		public void Dispose()
		{
		}
	}
}