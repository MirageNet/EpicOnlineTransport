// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single offer within the catalog. Instances of this structure are
	/// created by <see cref="EcomInterface.CopyOfferByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// Prices are stored in the lowest denomination for the associated currency. If CurrencyCode is
	/// "USD" then a price of 299 represents "$2.99".
	/// </summary>
	public class CatalogOffer
	{
		/// <summary>
		/// API Version: Set this to <see cref="EcomInterface.CatalogofferApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return EcomInterface.CatalogofferApiLatest; } }

		/// <summary>
		/// The index of this offer as it exists on the server.
		/// This is useful for understanding pagination data.
		/// </summary>
		public int ServerIndex { get; set; }

		/// <summary>
		/// Product namespace in which this offer exists
		/// </summary>
		public string CatalogNamespace { get; set; }

		/// <summary>
		/// The ID of this offer
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// Localized UTF-8 title of this offer
		/// </summary>
		public string TitleText { get; set; }

		/// <summary>
		/// Localized UTF-8 description of this offer
		/// </summary>
		public string DescriptionText { get; set; }

		/// <summary>
		/// Localized UTF-8 long description of this offer
		/// </summary>
		public string LongDescriptionText { get; set; }

		/// <summary>
		/// Deprecated.
		/// <see cref="CatalogOffer" />::TechnicalDetailsText has been deprecated.
		/// <see cref="CatalogItem" />::TechnicalDetailsText is still valid.
		/// </summary>
		public string TechnicalDetailsText_DEPRECATED { get; set; }

		/// <summary>
		/// The Currency Code for this offer
		/// </summary>
		public string CurrencyCode { get; set; }

		/// <summary>
		/// If this value is <see cref="Result.Success" /> then OriginalPrice, CurrentPrice, and DiscountPercentage contain valid data.
		/// Otherwise this value represents the error that occurred on the price query.
		/// </summary>
		public Result PriceResult { get; set; }

		/// <summary>
		/// The original price of this offer.
		/// </summary>
		public uint OriginalPrice { get; set; }

		/// <summary>
		/// The current price including discounts of this offer.
		/// </summary>
		public uint CurrentPrice { get; set; }

		/// <summary>
		/// A value from 0 to 100 define the percentage of the OrignalPrice that the CurrentPrice represents
		/// </summary>
		public byte DiscountPercentage { get; set; }

		/// <summary>
		/// Contains the POSIX timestamp that the offer expires or -1 if it does not expire
		/// </summary>
		public long ExpirationTimestamp { get; set; }

		/// <summary>
		/// The number of times that the requesting account has purchased this offer.
		/// </summary>
		public uint PurchasedCount { get; set; }

		/// <summary>
		/// The maximum number of times that the offer can be purchased.
		/// A negative value implies there is no limit.
		/// </summary>
		public int PurchaseLimit { get; set; }

		/// <summary>
		/// True if the user can purchase this offer.
		/// </summary>
		public bool AvailableForPurchase { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CatalogOfferInternal : IDisposable
	{
		private int m_ApiVersion;
		private int m_ServerIndex;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_CatalogNamespace;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Id;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_TitleText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_DescriptionText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_LongDescriptionText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_TechnicalDetailsText_DEPRECATED;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_CurrencyCode;
		private Result m_PriceResult;
		private uint m_OriginalPrice;
		private uint m_CurrentPrice;
		private byte m_DiscountPercentage;
		private long m_ExpirationTimestamp;
		private uint m_PurchasedCount;
		private int m_PurchaseLimit;
		private int m_AvailableForPurchase;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public int ServerIndex
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ServerIndex, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ServerIndex, value); }
		}

		public string CatalogNamespace
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_CatalogNamespace, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CatalogNamespace, value); }
		}

		public string Id
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Id, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Id, value); }
		}

		public string TitleText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_TitleText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_TitleText, value); }
		}

		public string DescriptionText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_DescriptionText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_DescriptionText, value); }
		}

		public string LongDescriptionText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_LongDescriptionText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LongDescriptionText, value); }
		}

		public string TechnicalDetailsText_DEPRECATED
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_TechnicalDetailsText_DEPRECATED, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_TechnicalDetailsText_DEPRECATED, value); }
		}

		public string CurrencyCode
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_CurrencyCode, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CurrencyCode, value); }
		}

		public Result PriceResult
		{
			get
			{
				var value = Helper.GetDefault<Result>();
				Helper.TryMarshalGet(m_PriceResult, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PriceResult, value); }
		}

		public uint OriginalPrice
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_OriginalPrice, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_OriginalPrice, value); }
		}

		public uint CurrentPrice
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_CurrentPrice, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CurrentPrice, value); }
		}

		public byte DiscountPercentage
		{
			get
			{
				var value = Helper.GetDefault<byte>();
				Helper.TryMarshalGet(m_DiscountPercentage, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_DiscountPercentage, value); }
		}

		public long ExpirationTimestamp
		{
			get
			{
				var value = Helper.GetDefault<long>();
				Helper.TryMarshalGet(m_ExpirationTimestamp, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ExpirationTimestamp, value); }
		}

		public uint PurchasedCount
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_PurchasedCount, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PurchasedCount, value); }
		}

		public int PurchaseLimit
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_PurchaseLimit, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PurchaseLimit, value); }
		}

		public bool AvailableForPurchase
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_AvailableForPurchase, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AvailableForPurchase, value); }
		}

		public void Dispose()
		{
		}
	}
}