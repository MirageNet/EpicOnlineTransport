// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single item within the catalog. Instances of this structure are created
	/// by <see cref="EcomInterface.CopyOfferItemByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// </summary>
	public class CatalogItem
	{
		/// <summary>
		/// API Version: Set this to <see cref="EcomInterface.CatalogitemApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return EcomInterface.CatalogitemApiLatest; } }

		/// <summary>
		/// Product namespace in which this item exists
		/// </summary>
		public string CatalogNamespace { get; set; }

		/// <summary>
		/// The ID of this item
		/// </summary>
		public string Id { get; set; }

		/// <summary>
		/// The entitlement name associated with this item
		/// </summary>
		public string EntitlementName { get; set; }

		/// <summary>
		/// Localized UTF-8 title of this item
		/// </summary>
		public string TitleText { get; set; }

		/// <summary>
		/// Localized UTF-8 description of this item
		/// </summary>
		public string DescriptionText { get; set; }

		/// <summary>
		/// Localized UTF-8 long description of this item
		/// </summary>
		public string LongDescriptionText { get; set; }

		/// <summary>
		/// Localized UTF-8 technical details of this item
		/// </summary>
		public string TechnicalDetailsText { get; set; }

		/// <summary>
		/// Localized UTF-8 developer of this item
		/// </summary>
		public string DeveloperText { get; set; }

		/// <summary>
		/// The type of item as defined in the catalog
		/// </summary>
		public EcomItemType ItemType { get; set; }

		/// <summary>
		/// If not -1 then this is the POSIX timestamp that the entitlement will end
		/// </summary>
		public long EntitlementEndTimestamp { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CatalogItemInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_CatalogNamespace;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Id;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_EntitlementName;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_TitleText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_DescriptionText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_LongDescriptionText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_TechnicalDetailsText;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_DeveloperText;
		private EcomItemType m_ItemType;
		private long m_EntitlementEndTimestamp;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string CatalogNamespace
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_CatalogNamespace, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CatalogNamespace, value); }
		}

		public string Id
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Id, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Id, value); }
		}

		public string EntitlementName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_EntitlementName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_EntitlementName, value); }
		}

		public string TitleText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_TitleText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_TitleText, value); }
		}

		public string DescriptionText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_DescriptionText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_DescriptionText, value); }
		}

		public string LongDescriptionText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_LongDescriptionText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LongDescriptionText, value); }
		}

		public string TechnicalDetailsText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_TechnicalDetailsText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_TechnicalDetailsText, value); }
		}

		public string DeveloperText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_DeveloperText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_DeveloperText, value); }
		}

		public EcomItemType ItemType
		{
			get
			{
				var value = Helper.GetDefault<EcomItemType>();
				Helper.TryMarshalGet(m_ItemType, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ItemType, value); }
		}

		public long EntitlementEndTimestamp
		{
			get
			{
				var value = Helper.GetDefault<long>();
				Helper.TryMarshalGet(m_EntitlementEndTimestamp, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_EntitlementEndTimestamp, value); }
		}

		public void Dispose()
		{
		}
	}
}