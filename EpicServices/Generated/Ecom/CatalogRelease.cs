// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Ecom
{
	/// <summary>
	/// Contains information about a single release within the catalog. Instances of this structure are
	/// created by <see cref="EcomInterface.CopyItemReleaseByIndex" />. They must be passed to <see cref="EcomInterface.Release" />.
	/// </summary>
	public class CatalogRelease
	{
		/// <summary>
		/// API Version: Set this to <see cref="EcomInterface.CatalogreleaseApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return EcomInterface.CatalogreleaseApiLatest; } }

		/// <summary>
		/// A list of compatible APP IDs
		/// </summary>
		public string[] CompatibleAppIds { get; set; }

		/// <summary>
		/// A list of compatible Platforms
		/// </summary>
		public string[] CompatiblePlatforms { get; set; }

		/// <summary>
		/// Release note for compatible versions
		/// </summary>
		public string ReleaseNote { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CatalogReleaseInternal : IDisposable
	{
		private int m_ApiVersion;
		private uint m_CompatibleAppIdCount;
		private IntPtr m_CompatibleAppIds;
		private uint m_CompatiblePlatformCount;
		private IntPtr m_CompatiblePlatforms;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ReleaseNote;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string[] CompatibleAppIds
		{
			get
			{
				var value = Helper.GetDefault<string[]>();
				Helper.TryMarshalGet(m_CompatibleAppIds, out value, m_CompatibleAppIdCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CompatibleAppIds, value, out m_CompatibleAppIdCount); }
		}

		public string[] CompatiblePlatforms
		{
			get
			{
				var value = Helper.GetDefault<string[]>();
				Helper.TryMarshalGet(m_CompatiblePlatforms, out value, m_CompatiblePlatformCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CompatiblePlatforms, value, out m_CompatiblePlatformCount); }
		}

		public string ReleaseNote
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ReleaseNote, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ReleaseNote, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_CompatibleAppIds);
			Helper.TryMarshalDispose(ref m_CompatiblePlatforms);
		}
	}
}