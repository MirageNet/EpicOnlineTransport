// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Presence
{
	/// <summary>
	/// All the known presence information for a specific user. This object must be released by calling <see cref="PresenceInterface.Release" />.
	/// <seealso cref="PresenceInterface.CopyPresence" />
	/// <seealso cref="PresenceInterface.Release" />
	/// </summary>
	public class Info
	{
		/// <summary>
		/// API Version: Set this to <see cref="PresenceInterface.InfoApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return PresenceInterface.InfoApiLatest; } }

		/// <summary>
		/// The status of the user
		/// </summary>
		public Status Status { get; set; }

		/// <summary>
		/// The Epic Online Services Account ID of the user
		/// </summary>
		public EpicAccountId UserId { get; set; }

		/// <summary>
		/// The product ID that the user is logged in from
		/// </summary>
		public string ProductId { get; set; }

		/// <summary>
		/// The version of the product the user is logged in from
		/// </summary>
		public string ProductVersion { get; set; }

		/// <summary>
		/// The platform of that the user is logged in from
		/// </summary>
		public string Platform { get; set; }

		/// <summary>
		/// The rich-text of the user
		/// </summary>
		public string RichText { get; set; }

		/// <summary>
		/// The first data record, or NULL if RecordsCount is not at least 1
		/// </summary>
		public DataRecord[] Records { get; set; }

		/// <summary>
		/// The user-facing name for the product the user is logged in from
		/// </summary>
		public string ProductName { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct InfoInternal : IDisposable
	{
		private int m_ApiVersion;
		private Status m_Status;
		private IntPtr m_UserId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ProductId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ProductVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Platform;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_RichText;
		private int m_RecordsCount;
		private IntPtr m_Records;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_ProductName;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public Status Status
		{
			get
			{
				var value = Helper.GetDefault<Status>();
				Helper.TryMarshalGet(m_Status, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Status, value); }
		}

		public EpicAccountId UserId
		{
			get
			{
				var value = Helper.GetDefault<EpicAccountId>();
				Helper.TryMarshalGet(m_UserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_UserId, value); }
		}

		public string ProductId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ProductId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductId, value); }
		}

		public string ProductVersion
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ProductVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductVersion, value); }
		}

		public string Platform
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Platform, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Platform, value); }
		}

		public string RichText
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_RichText, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_RichText, value); }
		}

		public DataRecordInternal[] Records
		{
			get
			{
				var value = Helper.GetDefault<DataRecordInternal[]>();
				Helper.TryMarshalGet(m_Records, out value, m_RecordsCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Records, value, out m_RecordsCount); }
		}

		public string ProductName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_ProductName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductName, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Records);
		}
	}
}