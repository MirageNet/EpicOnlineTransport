// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Stats
{
	public sealed class StatsInterface : Handle
	{
		public StatsInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="CopyStatByNameOptions" /> struct.
		/// </summary>
		public const int CopystatbynameApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyStatByIndexOptions" /> struct.
		/// </summary>
		public const int CopystatbyindexApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="GetstatscountApiLatest" /> instead.
		/// </summary>
		public const int GetstatcountApiLatest = GetstatscountApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="GetStatsCount" /> API.
		/// </summary>
		public const int GetstatscountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="Stat" /> struct.
		/// </summary>
		public const int StatApiLatest = 1;

		/// <summary>
		/// Timestamp value representing an undefined StartTime or EndTime for <see cref="Stat" />
		/// </summary>
		public const int TimeUndefined = -1;

		/// <summary>
		/// The most recent version of the <see cref="QueryStats" /> struct.
		/// </summary>
		public const int QuerystatsApiLatest = 2;

		/// <summary>
		/// Maximum number of stats that can be queried in a single <see cref="QueryStats" /> operation.
		/// </summary>
		public const int MaxQueryStats = 1000;

		/// <summary>
		/// The most recent version of the <see cref="IngestStat" /> struct.
		/// </summary>
		public const int IngeststatApiLatest = 2;

		/// <summary>
		/// Maximum number of stats that can be ingested in a single <see cref="IngestStat" /> operation.
		/// </summary>
		public const int MaxIngestStats = 3000;

		/// <summary>
		/// The most recent version of the <see cref="IngestData" /> struct.
		/// </summary>
		public const int IngestdataApiLatest = 1;

		/// <summary>
		/// Ingest a stat by the amount specified in Options.
		/// When the operation is complete and the delegate is triggered the stat will be uploaded to the backend to be processed.
		/// The stat may not be updated immediately and an achievement using the stat may take a while to be unlocked once the stat has been uploaded.
		/// </summary>
		/// <param name="options">Structure containing information about the stat we're ingesting.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="completionDelegate">This function is called when the ingest stat operation completes.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void IngestStat(IngestStatOptions options, object clientData, OnIngestStatCompleteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<IngestStatOptionsInternal>(options);

			var completionDelegateInternal = new OnIngestStatCompleteCallbackInternal(OnIngestStatComplete);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Stats_IngestStat(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Query for a list of stats for a specific player.
		/// </summary>
		/// <param name="options">Structure containing information about the player whose stats we're retrieving.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">This function is called when the query player stats operation completes.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the operation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public void QueryStats(QueryStatsOptions options, object clientData, OnQueryStatsCompleteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryStatsOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryStatsCompleteCallbackInternal(OnQueryStatsComplete);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Stats_QueryStats(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Fetch the number of stats that are cached locally.
		/// <seealso cref="CopyStatByIndex" />
		/// </summary>
		/// <param name="options">The Options associated with retrieving the stat count</param>
		/// <returns>
		/// Number of stats or 0 if there is an error
		/// </returns>
		public uint GetStatsCount(GetStatCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetStatCountOptionsInternal>(options);

			var funcResult = EOS_Stats_GetStatsCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches a stat from a given index. Use <see cref="Release" /> when finished with the data.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the Epic Online Services Account ID and index being accessed</param>
		/// <param name="outStat">The stat data for the given index, if it exists and is valid</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutStat
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the stat is not found
		/// </returns>
		public Result CopyStatByIndex(CopyStatByIndexOptions options, out Stat outStat)
		{
			var optionsInternal = Helper.CopyProperties<CopyStatByIndexOptionsInternal>(options);

			outStat = Helper.GetDefault<Stat>();

			var outStatAddress = IntPtr.Zero;

			var funcResult = EOS_Stats_CopyStatByIndex(InnerHandle, ref optionsInternal, ref outStatAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<StatInternal, Stat>(outStatAddress, out outStat))
			{
				EOS_Stats_Stat_Release(outStatAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches a stat from cached stats by name. Use <see cref="Release" /> when finished with the data.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the Epic Online Services Account ID and name being accessed</param>
		/// <param name="outStat">The stat data for the given name, if it exists and is valid</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutStat
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the stat is not found
		/// </returns>
		public Result CopyStatByName(CopyStatByNameOptions options, out Stat outStat)
		{
			var optionsInternal = Helper.CopyProperties<CopyStatByNameOptionsInternal>(options);

			outStat = Helper.GetDefault<Stat>();

			var outStatAddress = IntPtr.Zero;

			var funcResult = EOS_Stats_CopyStatByName(InnerHandle, ref optionsInternal, ref outStatAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<StatInternal, Stat>(outStatAddress, out outStat))
			{
				EOS_Stats_Stat_Release(outStatAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback]
		internal static void OnQueryStatsComplete(IntPtr address)
		{
			OnQueryStatsCompleteCallback callback = null;
			OnQueryStatsCompleteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryStatsCompleteCallback, OnQueryStatsCompleteCallbackInfoInternal, OnQueryStatsCompleteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnIngestStatComplete(IntPtr address)
		{
			OnIngestStatCompleteCallback callback = null;
			IngestStatCompleteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnIngestStatCompleteCallback, IngestStatCompleteCallbackInfoInternal, IngestStatCompleteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Stats_Stat_Release(IntPtr stat);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Stats_CopyStatByName(IntPtr handle, ref CopyStatByNameOptionsInternal options, ref IntPtr outStat);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Stats_CopyStatByIndex(IntPtr handle, ref CopyStatByIndexOptionsInternal options, ref IntPtr outStat);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_Stats_GetStatsCount(IntPtr handle, ref GetStatCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Stats_QueryStats(IntPtr handle, ref QueryStatsOptionsInternal options, IntPtr clientData, OnQueryStatsCompleteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Stats_IngestStat(IntPtr handle, ref IngestStatOptionsInternal options, IntPtr clientData, OnIngestStatCompleteCallbackInternal completionDelegate);
	}
}