// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Stats
{
	/// <summary>
	/// Input parameters for the <see cref="StatsInterface.QueryStats" /> function.
	/// </summary>
	public class QueryStatsOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="StatsInterface.QuerystatsApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return StatsInterface.QuerystatsApiLatest; } }

		/// <summary>
		/// The Product User ID of the local user requesting the stats. Set to null for dedicated server.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TimeUndefined" /> then this is the POSIX timestamp for start time (Optional).
		/// </summary>
		public DateTimeOffset? StartTime { get; set; }

		/// <summary>
		/// If not <see cref="StatsInterface.TimeUndefined" /> then this is the POSIX timestamp for end time (Optional).
		/// </summary>
		public DateTimeOffset? EndTime { get; set; }

		/// <summary>
		/// An array of stat names to query for (Optional).
		/// </summary>
		public string[] StatNames { get; set; }

		/// <summary>
		/// The Product User ID for the user whose stats are being retrieved
		/// </summary>
		public ProductUserId TargetUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct QueryStatsOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private long m_StartTime;
		private long m_EndTime;
		private IntPtr m_StatNames;
		private uint m_StatNamesCount;
		private IntPtr m_TargetUserId;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public DateTimeOffset? StartTime
		{
			get
			{
				var value = Helper.GetDefault<DateTimeOffset?>();
				Helper.TryMarshalGet(m_StartTime, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_StartTime, value); }
		}

		public DateTimeOffset? EndTime
		{
			get
			{
				var value = Helper.GetDefault<DateTimeOffset?>();
				Helper.TryMarshalGet(m_EndTime, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_EndTime, value); }
		}

		public string[] StatNames
		{
			get
			{
				var value = Helper.GetDefault<string[]>();
				Helper.TryMarshalGet(m_StatNames, out value, m_StatNamesCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_StatNames, value, out m_StatNamesCount); }
		}

		public ProductUserId TargetUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_TargetUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_TargetUserId, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_StatNames);
		}
	}
}