// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	/// <summary>
	/// Input parameters for the <see cref="SessionsInterface.CreateSessionModification" /> function.
	/// </summary>
	public class CreateSessionModificationOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="SessionsInterface.CreatesessionmodificationApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return SessionsInterface.CreatesessionmodificationApiLatest; } }

		/// <summary>
		/// Name of the session to create
		/// </summary>
		public string SessionName { get; set; }

		/// <summary>
		/// Bucket ID associated with the session
		/// </summary>
		public string BucketId { get; set; }

		/// <summary>
		/// Maximum number of players allowed in the session
		/// </summary>
		public uint MaxPlayers { get; set; }

		/// <summary>
		/// The Product User ID of the local user associated with the session
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// If true, this session will be associated with presence. Only one session at a time can have this flag true.
		/// This affects the ability of the Social Overlay to show game related actions to take in the user's social graph.
		/// 
		/// @note The Social Overlay can handle only one of the following three options at a time:
		/// using the bPresenceEnabled flags within the Sessions interface
		/// using the bPresenceEnabled flags within the Lobby interface
		/// using <see cref="Presence.PresenceModification.SetJoinInfo" />
		/// <seealso cref="Presence.PresenceModificationSetJoinInfoOptions" />
		/// <seealso cref="Lobby.CreateLobbyOptions" />
		/// <seealso cref="Lobby.JoinLobbyOptions" />
		/// <seealso cref="JoinSessionOptions" />
		/// </summary>
		public bool PresenceEnabled { get; set; }

		/// <summary>
		/// Optional session id - set to a globally unique value to override the backend assignment
		/// If not specified the backend service will assign one to the session. Do not mix and match.
		/// This value can be of size [<see cref="SessionsInterface.SessionmodificationMinSessionidoverrideLength" />, <see cref="SessionsInterface.SessionmodificationMaxSessionidoverrideLength" />]
		/// </summary>
		public string SessionId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CreateSessionModificationOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_SessionName;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_BucketId;
		private uint m_MaxPlayers;
		private IntPtr m_LocalUserId;
		private int m_PresenceEnabled;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_SessionId;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string SessionName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_SessionName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SessionName, value); }
		}

		public string BucketId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_BucketId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_BucketId, value); }
		}

		public uint MaxPlayers
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_MaxPlayers, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_MaxPlayers, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public bool PresenceEnabled
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_PresenceEnabled, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PresenceEnabled, value); }
		}

		public string SessionId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_SessionId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SessionId, value); }
		}

		public void Dispose()
		{
		}
	}
}