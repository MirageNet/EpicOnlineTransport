// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	public sealed class SessionsInterface : Handle
	{
		public SessionsInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="DumpSessionState" /> API.
		/// </summary>
		public const int DumpsessionstateApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="IsUserInSession" /> API.
		/// </summary>
		public const int IsuserinsessionApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopySessionHandleForPresence" /> API.
		/// </summary>
		public const int CopysessionhandleforpresenceApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopySessionHandleByUiEventId" /> API.
		/// </summary>
		public const int CopysessionhandlebyuieventidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopySessionHandleByInviteId" /> API.
		/// </summary>
		public const int CopysessionhandlebyinviteidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifyJoinSessionAccepted" /> API.
		/// </summary>
		public const int AddnotifyjoinsessionacceptedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifySessionInviteAccepted" /> API.
		/// </summary>
		public const int AddnotifysessioninviteacceptedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="AddNotifySessionInviteReceived" /> API.
		/// </summary>
		public const int AddnotifysessioninvitereceivedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyActiveSessionHandle" /> API.
		/// </summary>
		public const int CopyactivesessionhandleApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="ActiveSessionInfo" /> struct.
		/// </summary>
		public const int ActivesessionInfoApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetails.CopySessionAttributeByKey" /> API.
		/// </summary>
		public const int SessiondetailsCopysessionattributebykeyApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetails.CopySessionAttributeByIndex" /> API.
		/// </summary>
		public const int SessiondetailsCopysessionattributebyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetails.GetSessionAttributeCount" /> API.
		/// </summary>
		public const int SessiondetailsGetsessionattributecountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetails.CopyInfo" /> API.
		/// </summary>
		public const int SessiondetailsCopyinfoApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetailsInfo" /> struct.
		/// </summary>
		public const int SessiondetailsInfoApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetailsSettings" /> struct.
		/// </summary>
		public const int SessiondetailsSettingsApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.RemoveParameter" /> API.
		/// </summary>
		public const int SessionsearchRemoveparameterApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.SetParameter" /> API.
		/// </summary>
		public const int SessionsearchSetparameterApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.SetTargetUserId" /> API.
		/// </summary>
		public const int SessionsearchSettargetuseridApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.SetSessionId" /> API.
		/// </summary>
		public const int SessionsearchSetsessionidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.CopySearchResultByIndex" /> API.
		/// </summary>
		public const int SessionsearchCopysearchresultbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.GetSearchResultCount" /> API.
		/// </summary>
		public const int SessionsearchGetsearchresultcountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.Find" /> API.
		/// </summary>
		public const int SessionsearchFindApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="SessionSearch.SetMaxResults" /> API.
		/// </summary>
		public const int SessionsearchSetmaxsearchresultsApiLatest = 1;

		/// <summary>
		/// Maximum number of search results allowed with a given query
		/// </summary>
		public const int MaxSearchResults = 200;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.RemoveAttribute" /> API.
		/// </summary>
		public const int SessionmodificationRemoveattributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.AddAttribute" /> API.
		/// </summary>
		public const int SessionmodificationAddattributeApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="SessiondetailsAttributeApiLatest" /> instead.
		/// </summary>
		public const int SessionattributeApiLatest = SessiondetailsAttributeApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="SessionDetailsAttribute" /> struct.
		/// </summary>
		public const int SessiondetailsAttributeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="ActiveSession.GetRegisteredPlayerByIndex" /> function.
		/// </summary>
		public const int ActivesessionGetregisteredplayerbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="ActiveSession.GetRegisteredPlayerCount" /> function.
		/// </summary>
		public const int ActivesessionGetregisteredplayercountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="ActiveSession.CopyInfo" /> function.
		/// </summary>
		public const int ActivesessionCopyinfoApiLatest = 1;

		/// <summary>
		/// DEPRECATED! Use <see cref="AttributedataApiLatest" /> instead.
		/// </summary>
		public const int SessionattributedataApiLatest = AttributedataApiLatest;

		/// <summary>
		/// The most recent version of the <see cref="AttributeData" /> struct.
		/// </summary>
		public const int AttributedataApiLatest = 1;

		/// <summary>
		/// Search for a match with min free space (value is int)
		/// </summary>
		public const string SearchMinslotsavailable = "minslotsavailable";

		/// <summary>
		/// Search for non empty servers only (value is true/false)
		/// </summary>
		public const string SearchNonemptyServersOnly = "nonemptyonly";

		/// <summary>
		/// Search for empty servers only (value is true/false)
		/// </summary>
		public const string SearchEmptyServersOnly = "emptyonly";

		/// <summary>
		/// Search for a matching bucket ID (value is string)
		/// </summary>
		public const string SearchBucketId = "bucket";

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.SetInvitesAllowed" /> API.
		/// </summary>
		public const int SessionmodificationSetinvitesallowedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.SetMaxPlayers" /> API.
		/// </summary>
		public const int SessionmodificationSetmaxplayersApiLatest = 1;

		/// <summary>
		/// Maximum number of players allowed in a single session
		/// </summary>
		public const int Maxregisteredplayers = 1000;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.SetJoinInProgressAllowed" /> API.
		/// </summary>
		public const int SessionmodificationSetjoininprogressallowedApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.SetPermissionLevel" /> API.
		/// </summary>
		public const int SessionmodificationSetpermissionlevelApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.SetHostAddress" /> API.
		/// </summary>
		public const int SessionmodificationSethostaddressApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SessionModification.SetBucketId" /> API.
		/// </summary>
		public const int SessionmodificationSetbucketidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="UnregisterPlayers" /> API.
		/// </summary>
		public const int UnregisterplayersApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="RegisterPlayers" /> API.
		/// </summary>
		public const int RegisterplayersApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="EndSession" /> API.
		/// </summary>
		public const int EndsessionApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="StartSession" /> API.
		/// </summary>
		public const int StartsessionApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="JoinSession" /> API.
		/// </summary>
		public const int JoinsessionApiLatest = 2;

		/// <summary>
		/// The most recent version of the <see cref="DestroySession" /> API.
		/// </summary>
		public const int DestroysessionApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="UpdateSession" /> API.
		/// </summary>
		public const int UpdatesessionApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CreateSessionSearch" /> API.
		/// </summary>
		public const int CreatesessionsearchApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="GetInviteIdByIndex" /> API.
		/// </summary>
		public const int GetinviteidbyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="GetInviteCount" /> API.
		/// </summary>
		public const int GetinvitecountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryInvites" /> API.
		/// </summary>
		public const int QueryinvitesApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="RejectInvite" /> API.
		/// </summary>
		public const int RejectinviteApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="SendInvite" /> API.
		/// </summary>
		public const int SendinviteApiLatest = 1;

		/// <summary>
		/// Max length of an invite ID
		/// </summary>
		public const int InviteidMaxLength = 64;

		/// <summary>
		/// The most recent version of the <see cref="UpdateSessionModification" /> API.
		/// </summary>
		public const int UpdatesessionmodificationApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CreateSessionModification" /> API.
		/// </summary>
		public const int CreatesessionmodificationApiLatest = 3;

		/// <summary>
		/// Maximum number of characters a session id override
		/// </summary>
		public const int SessionmodificationMaxSessionidoverrideLength = 64;

		/// <summary>
		/// Minimum number of characters the session id override
		/// </summary>
		public const int SessionmodificationMinSessionidoverrideLength = 16;

		/// <summary>
		/// Maximum length of the name of the attribute associated with the session
		/// </summary>
		public const int SessionmodificationMaxSessionAttributeLength = 64;

		/// <summary>
		/// Maximum number of attributes allowed on the session
		/// </summary>
		public const int SessionmodificationMaxSessionAttributes = 64;

		/// <summary>
		/// Creates a session modification handle (<see cref="SessionModification" />). The session modification handle is used to build a new session and can be applied with <see cref="UpdateSession" />
		/// The <see cref="SessionModification" /> must be released by calling <see cref="SessionModification.Release" /> once it no longer needed.
		/// <seealso cref="SessionModification.Release" />
		/// <seealso cref="UpdateSession" />
		/// <seealso cref="SessionModification" />
		/// </summary>
		/// <param name="options">Required fields for the creation of a session such as a name, bucketid, and max players</param>
		/// <param name="outSessionModificationHandle">Pointer to a Session Modification Handle only set if successful</param>
		/// <returns>
		/// <see cref="Result.Success" /> if we successfully created the Session Modification Handle pointed at in OutSessionModificationHandle, or an error result if the input data was invalid
		/// </returns>
		public Result CreateSessionModification(CreateSessionModificationOptions options, out SessionModification outSessionModificationHandle)
		{
			var optionsInternal = Helper.CopyProperties<CreateSessionModificationOptionsInternal>(options);

			outSessionModificationHandle = Helper.GetDefault<SessionModification>();

			var outSessionModificationHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_CreateSessionModification(InnerHandle, ref optionsInternal, ref outSessionModificationHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionModificationHandleAddress, out outSessionModificationHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Creates a session modification handle (<see cref="SessionModification" />). The session modification handle is used to modify an existing session and can be applied with <see cref="UpdateSession" />.
		/// The <see cref="SessionModification" /> must be released by calling <see cref="SessionModification.Release" /> once it is no longer needed.
		/// <seealso cref="SessionModification.Release" />
		/// <seealso cref="UpdateSession" />
		/// <seealso cref="SessionModification" />
		/// </summary>
		/// <param name="options">Required fields such as session name</param>
		/// <param name="outSessionModificationHandle">Pointer to a Session Modification Handle only set if successful</param>
		/// <returns>
		/// <see cref="Result.Success" /> if we successfully created the Session Modification Handle pointed at in OutSessionModificationHandle, or an error result if the input data was invalid
		/// </returns>
		public Result UpdateSessionModification(UpdateSessionModificationOptions options, out SessionModification outSessionModificationHandle)
		{
			var optionsInternal = Helper.CopyProperties<UpdateSessionModificationOptionsInternal>(options);

			outSessionModificationHandle = Helper.GetDefault<SessionModification>();

			var outSessionModificationHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_UpdateSessionModification(InnerHandle, ref optionsInternal, ref outSessionModificationHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionModificationHandleAddress, out outSessionModificationHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Update a session given a session modification handle created by <see cref="CreateSessionModification" /> or <see cref="UpdateSessionModification" />
		/// </summary>
		/// <param name="options">Structure containing information about the session to be updated</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the update operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the update completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.SessionsOutOfSync" /> if the session is out of sync and will be updated on the next connection with the backend
		/// <see cref="Result.NotFound" /> if a session to be updated does not exist
		/// </returns>
		public void UpdateSession(UpdateSessionOptions options, object clientData, OnUpdateSessionCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<UpdateSessionOptionsInternal>(options);

			var completionDelegateInternal = new OnUpdateSessionCallbackInternal(OnUpdateSession);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_UpdateSession(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Destroy a session given a session name
		/// </summary>
		/// <param name="options">Structure containing information about the session to be destroyed</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the destroy operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the destroy completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.AlreadyPending" /> if the session is already marked for destroy
		/// <see cref="Result.NotFound" /> if a session to be destroyed does not exist
		/// </returns>
		public void DestroySession(DestroySessionOptions options, object clientData, OnDestroySessionCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<DestroySessionOptionsInternal>(options);

			var completionDelegateInternal = new OnDestroySessionCallbackInternal(OnDestroySession);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_DestroySession(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Join a session, creating a local session under a given session name. Backend will validate various conditions to make sure it is possible to join the session.
		/// </summary>
		/// <param name="options">Structure containing information about the session to be joined</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the join operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the join completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.SessionsSessionAlreadyExists" /> if the session is already exists or is in the process of being joined
		/// </returns>
		public void JoinSession(JoinSessionOptions options, object clientData, OnJoinSessionCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<JoinSessionOptionsInternal>(options);

			var completionDelegateInternal = new OnJoinSessionCallbackInternal(OnJoinSession);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_JoinSession(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Mark a session as started, making it unable to find if session properties indicate "join in progress" is not available
		/// </summary>
		/// <param name="options">Structure containing information about the session to be started</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the start operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the start completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.SessionsOutOfSync" /> if the session is out of sync and will be updated on the next connection with the backend
		/// <see cref="Result.NotFound" /> if a session to be started does not exist
		/// </returns>
		public void StartSession(StartSessionOptions options, object clientData, OnStartSessionCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<StartSessionOptionsInternal>(options);

			var completionDelegateInternal = new OnStartSessionCallbackInternal(OnStartSession);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_StartSession(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Mark a session as ended, making it available to find if "join in progress" was disabled. The session may be started again if desired
		/// </summary>
		/// <param name="options">Structure containing information about the session to be ended</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the end operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the end completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.SessionsOutOfSync" /> if the session is out of sync and will be updated on the next connection with the backend
		/// <see cref="Result.NotFound" /> if a session to be ended does not exist
		/// </returns>
		public void EndSession(EndSessionOptions options, object clientData, OnEndSessionCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<EndSessionOptionsInternal>(options);

			var completionDelegateInternal = new OnEndSessionCallbackInternal(OnEndSession);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_EndSession(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Register a group of players with the session, allowing them to invite others or otherwise indicate they are part of the session for determining a full session
		/// </summary>
		/// <param name="options">Structure containing information about the session and players to be registered</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the registration operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the register completes successfully
		/// <see cref="Result.NoChange" /> if the players to register registered previously
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.SessionsOutOfSync" /> if the session is out of sync and will be updated on the next connection with the backend
		/// <see cref="Result.NotFound" /> if a session to register players does not exist
		/// </returns>
		public void RegisterPlayers(RegisterPlayersOptions options, object clientData, OnRegisterPlayersCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<RegisterPlayersOptionsInternal>(options);

			var completionDelegateInternal = new OnRegisterPlayersCallbackInternal(OnRegisterPlayers);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_RegisterPlayers(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Unregister a group of players with the session, freeing up space for others to join
		/// </summary>
		/// <param name="options">Structure containing information about the session and players to be unregistered</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the unregistration operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the unregister completes successfully
		/// <see cref="Result.NoChange" /> if the players to unregister were not found
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.SessionsOutOfSync" /> if the session is out of sync and will be updated on the next connection with the backend
		/// <see cref="Result.NotFound" /> if a session to be unregister players does not exist
		/// </returns>
		public void UnregisterPlayers(UnregisterPlayersOptions options, object clientData, OnUnregisterPlayersCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<UnregisterPlayersOptionsInternal>(options);

			var completionDelegateInternal = new OnUnregisterPlayersCallbackInternal(OnUnregisterPlayers);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_UnregisterPlayers(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Send an invite to another player. User must have created the session or be registered in the session or else the call will fail
		/// </summary>
		/// <param name="options">Structure containing information about the session and player to invite</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the send invite operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the send invite completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.NotFound" /> if the session to send the invite from does not exist
		/// </returns>
		public void SendInvite(SendInviteOptions options, object clientData, OnSendInviteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<SendInviteOptionsInternal>(options);

			var completionDelegateInternal = new OnSendInviteCallbackInternal(OnSendInvite);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_SendInvite(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Reject an invite from another player.
		/// </summary>
		/// <param name="options">Structure containing information about the invite to reject</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the reject invite operation completes, either successfully or in error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the invite rejection completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.NotFound" /> if the invite does not exist
		/// </returns>
		public void RejectInvite(RejectInviteOptions options, object clientData, OnRejectInviteCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<RejectInviteOptionsInternal>(options);

			var completionDelegateInternal = new OnRejectInviteCallbackInternal(OnRejectInvite);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_RejectInvite(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Retrieve all existing invites for a single user
		/// </summary>
		/// <param name="options">Structure containing information about the invites to query</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">A callback that is fired when the query invites operation completes, either successfully or in error</param>
		public void QueryInvites(QueryInvitesOptions options, object clientData, OnQueryInvitesCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryInvitesOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryInvitesCallbackInternal(OnQueryInvites);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_Sessions_QueryInvites(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// Get the number of known invites for a given user
		/// </summary>
		/// <param name="options">the Options associated with retrieving the current invite count</param>
		/// <returns>
		/// number of known invites for a given user or 0 if there is an error
		/// </returns>
		public uint GetInviteCount(GetInviteCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetInviteCountOptionsInternal>(options);

			var funcResult = EOS_Sessions_GetInviteCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Retrieve an invite ID from a list of active invites for a given user
		/// <seealso cref="GetInviteCount" />
		/// <seealso cref="CopySessionHandleByInviteId" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the input is valid and an invite ID was returned
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.NotFound" /> if the invite doesn't exist
		/// </returns>
		public Result GetInviteIdByIndex(GetInviteIdByIndexOptions options, System.Text.StringBuilder outBuffer, ref int inOutBufferLength)
		{
			var optionsInternal = Helper.CopyProperties<GetInviteIdByIndexOptionsInternal>(options);

			var funcResult = EOS_Sessions_GetInviteIdByIndex(InnerHandle, ref optionsInternal, outBuffer, ref inOutBufferLength);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Create a session search handle. This handle may be modified to include various search parameters.
		/// Searching is possible in three methods, all mutually exclusive
		/// - set the session ID to find a specific session
		/// - set the target user ID to find a specific user
		/// - set session parameters to find an array of sessions that match the search criteria
		/// </summary>
		/// <param name="options">Structure containing required parameters such as the maximum number of search results</param>
		/// <param name="outSessionSearchHandle">The new search handle or null if there was an error creating the search handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the search creation completes successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public Result CreateSessionSearch(CreateSessionSearchOptions options, out SessionSearch outSessionSearchHandle)
		{
			var optionsInternal = Helper.CopyProperties<CreateSessionSearchOptionsInternal>(options);

			outSessionSearchHandle = Helper.GetDefault<SessionSearch>();

			var outSessionSearchHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_CreateSessionSearch(InnerHandle, ref optionsInternal, ref outSessionSearchHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionSearchHandleAddress, out outSessionSearchHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Create a handle to an existing active session.
		/// </summary>
		/// <param name="options">Structure containing information about the active session to retrieve</param>
		/// <param name="outSessionHandle">The new active session handle or null if there was an error</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the session handle was created successfully
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if the active session doesn't exist
		/// </returns>
		public Result CopyActiveSessionHandle(CopyActiveSessionHandleOptions options, out ActiveSession outSessionHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopyActiveSessionHandleOptionsInternal>(options);

			outSessionHandle = Helper.GetDefault<ActiveSession>();

			var outSessionHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_CopyActiveSessionHandle(InnerHandle, ref optionsInternal, ref outSessionHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionHandleAddress, out outSessionHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Register to receive session invites.
		/// @note must call RemoveNotifySessionInviteReceived to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the session invite notification</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="notificationFn">A callback that is fired when a session invite for a user has been received</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifySessionInviteReceived(AddNotifySessionInviteReceivedOptions options, object clientData, OnSessionInviteReceivedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifySessionInviteReceivedOptionsInternal>(options);

			var notificationFnInternal = new OnSessionInviteReceivedCallbackInternal(OnSessionInviteReceived);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Sessions_AddNotifySessionInviteReceived(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving session invites.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifySessionInviteReceived(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Sessions_RemoveNotifySessionInviteReceived(InnerHandle, inId);
		}

		/// <summary>
		/// Register to receive notifications when a user accepts a session invite via the social overlay.
		/// @note must call RemoveNotifySessionInviteAccepted to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifySessionInviteAccepted(AddNotifySessionInviteAcceptedOptions options, object clientData, OnSessionInviteAcceptedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifySessionInviteAcceptedOptionsInternal>(options);

			var notificationFnInternal = new OnSessionInviteAcceptedCallbackInternal(OnSessionInviteAccepted);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Sessions_AddNotifySessionInviteAccepted(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when a user accepts a session invite via the social overlay.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifySessionInviteAccepted(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Sessions_RemoveNotifySessionInviteAccepted(InnerHandle, inId);
		}

		/// <summary>
		/// Register to receive notifications when a user accepts a session join game via the social overlay.
		/// @note must call RemoveNotifyJoinSessionAccepted to remove the notification
		/// </summary>
		/// <param name="options">Structure containing information about the request.</param>
		/// <param name="clientData">Arbitrary data that is passed back to you in the CompletionDelegate.</param>
		/// <param name="notificationFn">A callback that is fired when a a notification is received.</param>
		/// <returns>
		/// handle representing the registered callback
		/// </returns>
		public ulong AddNotifyJoinSessionAccepted(AddNotifyJoinSessionAcceptedOptions options, object clientData, OnJoinSessionAcceptedCallback notificationFn)
		{
			var optionsInternal = Helper.CopyProperties<AddNotifyJoinSessionAcceptedOptionsInternal>(options);

			var notificationFnInternal = new OnJoinSessionAcceptedCallbackInternal(OnJoinSessionAccepted);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, notificationFn, notificationFnInternal);

			var funcResult = EOS_Sessions_AddNotifyJoinSessionAccepted(InnerHandle, ref optionsInternal, clientDataAddress, notificationFnInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryAssignNotificationIdToCallback(clientDataAddress, funcResult);

			var funcResultReturn = Helper.GetDefault<ulong>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Unregister from receiving notifications when a user accepts a session join game via the social overlay.
		/// </summary>
		/// <param name="inId">Handle representing the registered callback</param>
		public void RemoveNotifyJoinSessionAccepted(ulong inId)
		{
			Helper.TryRemoveCallbackByNotificationId(inId);
			EOS_Sessions_RemoveNotifyJoinSessionAccepted(InnerHandle, inId);
		}

		/// <summary>
		/// <see cref="CopySessionHandleByInviteId" /> is used to immediately retrieve a handle to the session information from after notification of an invite
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionHandle, must be passed to <see cref="SessionDetails.Release" /> to release the memory associated with it.
		/// <seealso cref="CopySessionHandleByInviteIdOptions" />
		/// <seealso cref="SessionDetails.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outSessionHandle">out parameter used to receive the session handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionHandle
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid invite ID or a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if the invite ID cannot be found
		/// </returns>
		public Result CopySessionHandleByInviteId(CopySessionHandleByInviteIdOptions options, out SessionDetails outSessionHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopySessionHandleByInviteIdOptionsInternal>(options);

			outSessionHandle = Helper.GetDefault<SessionDetails>();

			var outSessionHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_CopySessionHandleByInviteId(InnerHandle, ref optionsInternal, ref outSessionHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionHandleAddress, out outSessionHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopySessionHandleByUiEventId" /> is used to immediately retrieve a handle to the session information from after notification of a join game event.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionHandle, must be passed to <see cref="SessionDetails.Release" /> to release the memory associated with it.
		/// <seealso cref="CopySessionHandleByUiEventIdOptions" />
		/// <seealso cref="SessionDetails.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outSessionHandle">out parameter used to receive the session handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionHandle
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid invite ID or a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if the invite ID cannot be found
		/// </returns>
		public Result CopySessionHandleByUiEventId(CopySessionHandleByUiEventIdOptions options, out SessionDetails outSessionHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopySessionHandleByUiEventIdOptionsInternal>(options);

			outSessionHandle = Helper.GetDefault<SessionDetails>();

			var outSessionHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_CopySessionHandleByUiEventId(InnerHandle, ref optionsInternal, ref outSessionHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionHandleAddress, out outSessionHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopySessionHandleForPresence" /> is used to immediately retrieve a handle to the session information which was marked with bPresenceEnabled on create or join.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionHandle, must be passed to <see cref="SessionDetails.Release" /> to release the memory associated with it.
		/// <seealso cref="CopySessionHandleForPresenceOptions" />
		/// <seealso cref="SessionDetails.Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outSessionHandle">out parameter used to receive the session handle</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionHandle
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid invite ID or a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if there is no session with bPresenceEnabled
		/// </returns>
		public Result CopySessionHandleForPresence(CopySessionHandleForPresenceOptions options, out SessionDetails outSessionHandle)
		{
			var optionsInternal = Helper.CopyProperties<CopySessionHandleForPresenceOptionsInternal>(options);

			outSessionHandle = Helper.GetDefault<SessionDetails>();

			var outSessionHandleAddress = IntPtr.Zero;

			var funcResult = EOS_Sessions_CopySessionHandleForPresence(InnerHandle, ref optionsInternal, ref outSessionHandleAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			Helper.TryMarshalGet(outSessionHandleAddress, out outSessionHandle);
			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="IsUserInSession" /> returns whether or not a given user can be found in a specified session
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the user is found in the specified session
		/// <see cref="Result.NotFound" /> if the user is not found in the specified session
		/// <see cref="Result.InvalidParameters" /> if you pass an invalid invite ID or a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.InvalidProductUserID" /> if an invalid target user is specified
		/// <see cref="Result.SessionsInvalidSession" /> if the session specified is invalid
		/// </returns>
		public Result IsUserInSession(IsUserInSessionOptions options)
		{
			var optionsInternal = Helper.CopyProperties<IsUserInSessionOptionsInternal>(options);

			var funcResult = EOS_Sessions_IsUserInSession(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Dump the contents of active sessions that exist locally to the log output, purely for debug purposes
		/// </summary>
		/// <param name="options">Options related to dumping session state such as the session name</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the output operation completes successfully
		/// <see cref="Result.NotFound" /> if the session specified does not exist
		/// <see cref="Result.InvalidParameters" /> if any of the options are incorrect
		/// </returns>
		public Result DumpSessionState(DumpSessionStateOptions options)
		{
			var optionsInternal = Helper.CopyProperties<DumpSessionStateOptionsInternal>(options);

			var funcResult = EOS_Sessions_DumpSessionState(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback]
		internal static void OnJoinSessionAccepted(IntPtr address)
		{
			OnJoinSessionAcceptedCallback callback = null;
			JoinSessionAcceptedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnJoinSessionAcceptedCallback, JoinSessionAcceptedCallbackInfoInternal, JoinSessionAcceptedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnSessionInviteAccepted(IntPtr address)
		{
			OnSessionInviteAcceptedCallback callback = null;
			SessionInviteAcceptedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnSessionInviteAcceptedCallback, SessionInviteAcceptedCallbackInfoInternal, SessionInviteAcceptedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnSessionInviteReceived(IntPtr address)
		{
			OnSessionInviteReceivedCallback callback = null;
			SessionInviteReceivedCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnSessionInviteReceivedCallback, SessionInviteReceivedCallbackInfoInternal, SessionInviteReceivedCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnQueryInvites(IntPtr address)
		{
			OnQueryInvitesCallback callback = null;
			QueryInvitesCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryInvitesCallback, QueryInvitesCallbackInfoInternal, QueryInvitesCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnRejectInvite(IntPtr address)
		{
			OnRejectInviteCallback callback = null;
			RejectInviteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnRejectInviteCallback, RejectInviteCallbackInfoInternal, RejectInviteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnSendInvite(IntPtr address)
		{
			OnSendInviteCallback callback = null;
			SendInviteCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnSendInviteCallback, SendInviteCallbackInfoInternal, SendInviteCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnUnregisterPlayers(IntPtr address)
		{
			OnUnregisterPlayersCallback callback = null;
			UnregisterPlayersCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnUnregisterPlayersCallback, UnregisterPlayersCallbackInfoInternal, UnregisterPlayersCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnRegisterPlayers(IntPtr address)
		{
			OnRegisterPlayersCallback callback = null;
			RegisterPlayersCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnRegisterPlayersCallback, RegisterPlayersCallbackInfoInternal, RegisterPlayersCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnEndSession(IntPtr address)
		{
			OnEndSessionCallback callback = null;
			EndSessionCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnEndSessionCallback, EndSessionCallbackInfoInternal, EndSessionCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnStartSession(IntPtr address)
		{
			OnStartSessionCallback callback = null;
			StartSessionCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnStartSessionCallback, StartSessionCallbackInfoInternal, StartSessionCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnJoinSession(IntPtr address)
		{
			OnJoinSessionCallback callback = null;
			JoinSessionCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnJoinSessionCallback, JoinSessionCallbackInfoInternal, JoinSessionCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnDestroySession(IntPtr address)
		{
			OnDestroySessionCallback callback = null;
			DestroySessionCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnDestroySessionCallback, DestroySessionCallbackInfoInternal, DestroySessionCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnUpdateSession(IntPtr address)
		{
			OnUpdateSessionCallback callback = null;
			UpdateSessionCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnUpdateSessionCallback, UpdateSessionCallbackInfoInternal, UpdateSessionCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_DumpSessionState(IntPtr handle, ref DumpSessionStateOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_IsUserInSession(IntPtr handle, ref IsUserInSessionOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_CopySessionHandleForPresence(IntPtr handle, ref CopySessionHandleForPresenceOptionsInternal options, ref IntPtr outSessionHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_CopySessionHandleByUiEventId(IntPtr handle, ref CopySessionHandleByUiEventIdOptionsInternal options, ref IntPtr outSessionHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_CopySessionHandleByInviteId(IntPtr handle, ref CopySessionHandleByInviteIdOptionsInternal options, ref IntPtr outSessionHandle);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_RemoveNotifyJoinSessionAccepted(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Sessions_AddNotifyJoinSessionAccepted(IntPtr handle, ref AddNotifyJoinSessionAcceptedOptionsInternal options, IntPtr clientData, OnJoinSessionAcceptedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_RemoveNotifySessionInviteAccepted(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Sessions_AddNotifySessionInviteAccepted(IntPtr handle, ref AddNotifySessionInviteAcceptedOptionsInternal options, IntPtr clientData, OnSessionInviteAcceptedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_RemoveNotifySessionInviteReceived(IntPtr handle, ulong inId);

		[DllImport(Config.BinaryName)]
		private static extern ulong EOS_Sessions_AddNotifySessionInviteReceived(IntPtr handle, ref AddNotifySessionInviteReceivedOptionsInternal options, IntPtr clientData, OnSessionInviteReceivedCallbackInternal notificationFn);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_CopyActiveSessionHandle(IntPtr handle, ref CopyActiveSessionHandleOptionsInternal options, ref IntPtr outSessionHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_CreateSessionSearch(IntPtr handle, ref CreateSessionSearchOptionsInternal options, ref IntPtr outSessionSearchHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_GetInviteIdByIndex(IntPtr handle, ref GetInviteIdByIndexOptionsInternal options, System.Text.StringBuilder outBuffer, ref int inOutBufferLength);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_Sessions_GetInviteCount(IntPtr handle, ref GetInviteCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_QueryInvites(IntPtr handle, ref QueryInvitesOptionsInternal options, IntPtr clientData, OnQueryInvitesCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_RejectInvite(IntPtr handle, ref RejectInviteOptionsInternal options, IntPtr clientData, OnRejectInviteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_SendInvite(IntPtr handle, ref SendInviteOptionsInternal options, IntPtr clientData, OnSendInviteCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_UnregisterPlayers(IntPtr handle, ref UnregisterPlayersOptionsInternal options, IntPtr clientData, OnUnregisterPlayersCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_RegisterPlayers(IntPtr handle, ref RegisterPlayersOptionsInternal options, IntPtr clientData, OnRegisterPlayersCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_EndSession(IntPtr handle, ref EndSessionOptionsInternal options, IntPtr clientData, OnEndSessionCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_StartSession(IntPtr handle, ref StartSessionOptionsInternal options, IntPtr clientData, OnStartSessionCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_JoinSession(IntPtr handle, ref JoinSessionOptionsInternal options, IntPtr clientData, OnJoinSessionCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_DestroySession(IntPtr handle, ref DestroySessionOptionsInternal options, IntPtr clientData, OnDestroySessionCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_Sessions_UpdateSession(IntPtr handle, ref UpdateSessionOptionsInternal options, IntPtr clientData, OnUpdateSessionCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_UpdateSessionModification(IntPtr handle, ref UpdateSessionModificationOptionsInternal options, ref IntPtr outSessionModificationHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_Sessions_CreateSessionModification(IntPtr handle, ref CreateSessionModificationOptionsInternal options, ref IntPtr outSessionModificationHandle);
	}
}