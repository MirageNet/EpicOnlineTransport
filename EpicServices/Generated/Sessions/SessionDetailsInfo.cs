// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	/// <summary>
	/// Internal details about a session, found on both active sessions and within search results
	/// </summary>
	public class SessionDetailsInfo
	{
		/// <summary>
		/// API Version: Set this to <see cref="SessionsInterface.SessiondetailsInfoApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return SessionsInterface.SessiondetailsInfoApiLatest; } }

		/// <summary>
		/// Session ID assigned by the backend service
		/// </summary>
		public string SessionId { get; set; }

		/// <summary>
		/// IP address of this session as visible by the backend service
		/// </summary>
		public string HostAddress { get; set; }

		/// <summary>
		/// Number of remaining open spaces on the session (NumPublicConnections - RegisteredPlayers
		/// </summary>
		public uint NumOpenPublicConnections { get; set; }

		/// <summary>
		/// Reference to the additional settings associated with this session
		/// </summary>
		public SessionDetailsSettings Settings { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct SessionDetailsInfoInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_SessionId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_HostAddress;
		private uint m_NumOpenPublicConnections;
		private IntPtr m_Settings;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string SessionId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_SessionId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_SessionId, value); }
		}

		public string HostAddress
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_HostAddress, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_HostAddress, value); }
		}

		public uint NumOpenPublicConnections
		{
			get
			{
				var value = Helper.GetDefault<uint>();
				Helper.TryMarshalGet(m_NumOpenPublicConnections, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_NumOpenPublicConnections, value); }
		}

		public SessionDetailsSettingsInternal? Settings
		{
			get
			{
				var value = Helper.GetDefault<SessionDetailsSettingsInternal?>();
				Helper.TryMarshalGet(m_Settings, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Settings, value); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_Settings);
		}
	}
}