// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Sessions
{
	public sealed class SessionDetails : Handle
	{
		public SessionDetails(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// <see cref="CopyInfo" /> is used to immediately retrieve a copy of session information from a given source such as a active session or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <seealso cref="SessionDetailsInfo" />
		/// <seealso cref="SessionDetailsCopyInfoOptions" />
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outSessionInfo">Out parameter used to receive the <see cref="SessionDetailsInfo" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopyInfo(SessionDetailsCopyInfoOptions options, out SessionDetailsInfo outSessionInfo)
		{
			var optionsInternal = Helper.CopyProperties<SessionDetailsCopyInfoOptionsInternal>(options);

			outSessionInfo = Helper.GetDefault<SessionDetailsInfo>();

			var outSessionInfoAddress = IntPtr.Zero;

			var funcResult = EOS_SessionDetails_CopyInfo(InnerHandle, ref optionsInternal, ref outSessionInfoAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<SessionDetailsInfoInternal, SessionDetailsInfo>(outSessionInfoAddress, out outSessionInfo))
			{
				EOS_SessionDetails_Info_Release(outSessionInfoAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Get the number of attributes associated with this session
		/// </summary>
		/// <param name="options">the Options associated with retrieving the attribute count</param>
		/// <returns>
		/// number of attributes on the session or 0 if there is an error
		/// </returns>
		public uint GetSessionAttributeCount(SessionDetailsGetSessionAttributeCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<SessionDetailsGetSessionAttributeCountOptionsInternal>(options);

			var funcResult = EOS_SessionDetails_GetSessionAttributeCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopySessionAttributeByIndex" /> is used to immediately retrieve a copy of session attribution from a given source such as a active session or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionAttribute, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <seealso cref="SessionDetailsAttribute" />
		/// <seealso cref="SessionDetailsCopySessionAttributeByIndexOptions" />
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outSessionAttribute">Out parameter used to receive the <see cref="SessionDetailsAttribute" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopySessionAttributeByIndex(SessionDetailsCopySessionAttributeByIndexOptions options, out SessionDetailsAttribute outSessionAttribute)
		{
			var optionsInternal = Helper.CopyProperties<SessionDetailsCopySessionAttributeByIndexOptionsInternal>(options);

			outSessionAttribute = Helper.GetDefault<SessionDetailsAttribute>();

			var outSessionAttributeAddress = IntPtr.Zero;

			var funcResult = EOS_SessionDetails_CopySessionAttributeByIndex(InnerHandle, ref optionsInternal, ref outSessionAttributeAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<SessionDetailsAttributeInternal, SessionDetailsAttribute>(outSessionAttributeAddress, out outSessionAttribute))
			{
				EOS_SessionDetails_Attribute_Release(outSessionAttributeAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// <see cref="CopySessionAttributeByKey" /> is used to immediately retrieve a copy of session attribution from a given source such as a active session or a search result.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutSessionAttribute, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <seealso cref="SessionDetailsAttribute" />
		/// <seealso cref="SessionDetailsCopySessionAttributeByKeyOptions" />
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the input parameters</param>
		/// <param name="outSessionAttribute">Out parameter used to receive the <see cref="SessionDetailsAttribute" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutSessionAttribute
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// </returns>
		public Result CopySessionAttributeByKey(SessionDetailsCopySessionAttributeByKeyOptions options, out SessionDetailsAttribute outSessionAttribute)
		{
			var optionsInternal = Helper.CopyProperties<SessionDetailsCopySessionAttributeByKeyOptionsInternal>(options);

			outSessionAttribute = Helper.GetDefault<SessionDetailsAttribute>();

			var outSessionAttributeAddress = IntPtr.Zero;

			var funcResult = EOS_SessionDetails_CopySessionAttributeByKey(InnerHandle, ref optionsInternal, ref outSessionAttributeAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<SessionDetailsAttributeInternal, SessionDetailsAttribute>(outSessionAttributeAddress, out outSessionAttribute))
			{
				EOS_SessionDetails_Attribute_Release(outSessionAttributeAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Release the memory associated with a single session. This must be called on data retrieved from <see cref="SessionSearch.CopySearchResultByIndex" />.
		/// <seealso cref="SessionSearch.CopySearchResultByIndex" />
		/// </summary>
		/// <param name="sessionHandle">- The session handle to release</param>
		public void Release()
		{
			EOS_SessionDetails_Release(InnerHandle);
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_SessionDetails_Info_Release(IntPtr sessionInfo);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_SessionDetails_Attribute_Release(IntPtr sessionAttribute);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_SessionDetails_Release(IntPtr sessionHandle);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_SessionDetails_CopySessionAttributeByKey(IntPtr handle, ref SessionDetailsCopySessionAttributeByKeyOptionsInternal options, ref IntPtr outSessionAttribute);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_SessionDetails_CopySessionAttributeByIndex(IntPtr handle, ref SessionDetailsCopySessionAttributeByIndexOptionsInternal options, ref IntPtr outSessionAttribute);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_SessionDetails_GetSessionAttributeCount(IntPtr handle, ref SessionDetailsGetSessionAttributeCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_SessionDetails_CopyInfo(IntPtr handle, ref SessionDetailsCopyInfoOptionsInternal options, ref IntPtr outSessionInfo);
	}
}