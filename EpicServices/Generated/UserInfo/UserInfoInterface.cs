// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.UserInfo
{
	public sealed class UserInfoInterface : Handle
	{
		public UserInfoInterface(IntPtr innerHandle) : base(innerHandle)
		{
		}

		/// <summary>
		/// The most recent version of the <see cref="CopyExternalUserInfoByAccountIdOptions" /> struct.
		/// </summary>
		public const int CopyexternaluserinfobyaccountidApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyExternalUserInfoByIndexOptions" /> struct.
		/// </summary>
		public const int CopyexternaluserinfobyaccounttypeApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyExternalUserInfoByIndexOptions" /> struct.
		/// </summary>
		public const int CopyexternaluserinfobyindexApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="Achievements.AchievementsInterface.GetAchievementDefinitionCount" /> API.
		/// </summary>
		public const int GetexternaluserinfocountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="UserInfoData" />_External struct.
		/// </summary>
		public const int ExternaluserinfoApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="CopyUserInfo" /> API.
		/// </summary>
		public const int CopyuserinfoApiLatest = 2;

		/// <summary>
		/// The maximum length of display names when encoded as UTF-8 as returned by <see cref="CopyUserInfo" />. This length does not include the null terminator.
		/// </summary>
		public const int MaxDisplaynameUtf8Length = 64;

		/// <summary>
		/// The maximum length of display names, in displayable characters
		/// </summary>
		public const int MaxDisplaynameCharacters = 16;

		/// <summary>
		/// The most recent version of the <see cref="QueryUserInfoByExternalAccount" /> API.
		/// </summary>
		public const int QueryuserinfobyexternalaccountApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryUserInfoByDisplayName" /> API.
		/// </summary>
		public const int QueryuserinfobydisplaynameApiLatest = 1;

		/// <summary>
		/// The most recent version of the <see cref="QueryUserInfo" /> API.
		/// </summary>
		public const int QueryuserinfoApiLatest = 1;

		/// <summary>
		/// <see cref="QueryUserInfo" /> is used to start an asynchronous query to retrieve information, such as display name, about another account.
		/// Once the callback has been fired with a successful ResultCode, it is possible to call <see cref="CopyUserInfo" /> to receive an <see cref="UserInfoData" /> containing the available information.
		/// <seealso cref="UserInfoData" />
		/// <seealso cref="CopyUserInfo" />
		/// <seealso cref="QueryUserInfoOptions" />
		/// <seealso cref="OnQueryUserInfoCallback" />
		/// </summary>
		/// <param name="options">structure containing the input parameters</param>
		/// <param name="clientData">arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">a callback that is fired when the async operation completes, either successfully or in error</param>
		public void QueryUserInfo(QueryUserInfoOptions options, object clientData, OnQueryUserInfoCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryUserInfoOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryUserInfoCallbackInternal(OnQueryUserInfo);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_UserInfo_QueryUserInfo(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// <see cref="QueryUserInfoByDisplayName" /> is used to start an asynchronous query to retrieve user information by display name. This can be useful for getting the <see cref="EpicAccountId" /> for a display name.
		/// Once the callback has been fired with a successful ResultCode, it is possible to call <see cref="CopyUserInfo" /> to receive an <see cref="UserInfoData" /> containing the available information.
		/// <seealso cref="UserInfoData" />
		/// <seealso cref="CopyUserInfo" />
		/// <seealso cref="QueryUserInfoByDisplayNameOptions" />
		/// <seealso cref="OnQueryUserInfoByDisplayNameCallback" />
		/// </summary>
		/// <param name="options">structure containing the input parameters</param>
		/// <param name="clientData">arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">a callback that is fired when the async operation completes, either successfully or in error</param>
		public void QueryUserInfoByDisplayName(QueryUserInfoByDisplayNameOptions options, object clientData, OnQueryUserInfoByDisplayNameCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryUserInfoByDisplayNameOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryUserInfoByDisplayNameCallbackInternal(OnQueryUserInfoByDisplayName);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_UserInfo_QueryUserInfoByDisplayName(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// <see cref="QueryUserInfoByExternalAccount" /> is used to start an asynchronous query to retrieve user information by external accounts.
		/// This can be useful for getting the <see cref="EpicAccountId" />s for external accounts.
		/// Once the callback has been fired with a successful ResultCode, it is possible to call CopyUserInfo to receive an <see cref="UserInfoData" /> containing the available information.
		/// <seealso cref="UserInfoData" />
		/// <seealso cref="QueryUserInfoByExternalAccountOptions" />
		/// <seealso cref="OnQueryUserInfoByExternalAccountCallback" />
		/// </summary>
		/// <param name="options">structure containing the input parameters</param>
		/// <param name="clientData">arbitrary data that is passed back to you in the CompletionDelegate</param>
		/// <param name="completionDelegate">a callback that is fired when the async operation completes, either successfully or in error</param>
		public void QueryUserInfoByExternalAccount(QueryUserInfoByExternalAccountOptions options, object clientData, OnQueryUserInfoByExternalAccountCallback completionDelegate)
		{
			var optionsInternal = Helper.CopyProperties<QueryUserInfoByExternalAccountOptionsInternal>(options);

			var completionDelegateInternal = new OnQueryUserInfoByExternalAccountCallbackInternal(OnQueryUserInfoByExternalAccount);
			var clientDataAddress = IntPtr.Zero;
			Helper.AddCallback(ref clientDataAddress, clientData, completionDelegate, completionDelegateInternal);

			EOS_UserInfo_QueryUserInfoByExternalAccount(InnerHandle, ref optionsInternal, clientDataAddress, completionDelegateInternal);
			Helper.TryMarshalDispose(ref optionsInternal);
		}

		/// <summary>
		/// <see cref="CopyUserInfo" /> is used to immediately retrieve a copy of user information based on an Epic Online Services Account ID, cached by a previous call to <see cref="QueryUserInfo" />.
		/// If the call returns an <see cref="Result.Success" /> result, the out parameter, OutUserInfo, must be passed to <see cref="Release" /> to release the memory associated with it.
		/// <seealso cref="UserInfoData" />
		/// <seealso cref="CopyUserInfoOptions" />
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">structure containing the input parameters</param>
		/// <param name="outUserInfo">out parameter used to receive the <see cref="UserInfoData" /> structure.</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutUserInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.IncompatibleVersion" /> if the API version passed in is incorrect
		/// <see cref="Result.NotFound" /> if the user info is not locally cached. The information must have been previously cached by a call to <see cref="QueryUserInfo" />
		/// </returns>
		public Result CopyUserInfo(CopyUserInfoOptions options, out UserInfoData outUserInfo)
		{
			var optionsInternal = Helper.CopyProperties<CopyUserInfoOptionsInternal>(options);

			outUserInfo = Helper.GetDefault<UserInfoData>();

			var outUserInfoAddress = IntPtr.Zero;

			var funcResult = EOS_UserInfo_CopyUserInfo(InnerHandle, ref optionsInternal, ref outUserInfoAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<UserInfoDataInternal, UserInfoData>(outUserInfoAddress, out outUserInfo))
			{
				EOS_UserInfo_Release(outUserInfoAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetch the number of external user infos that are cached locally.
		/// <seealso cref="CopyExternalUserInfoByIndex" />
		/// </summary>
		/// <param name="options">The options associated with retrieving the external user info count</param>
		/// <returns>
		/// The number of external user infos, or 0 if there is an error
		/// </returns>
		public uint GetExternalUserInfoCount(GetExternalUserInfoCountOptions options)
		{
			var optionsInternal = Helper.CopyProperties<GetExternalUserInfoCountOptionsInternal>(options);

			var funcResult = EOS_UserInfo_GetExternalUserInfoCount(InnerHandle, ref optionsInternal);
			Helper.TryMarshalDispose(ref optionsInternal);

			var funcResultReturn = Helper.GetDefault<uint>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches an external user info from a given index.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the index being accessed</param>
		/// <param name="outExternalUserInfo">The external user info. If it exists and is valid, use <see cref="Release" /> when finished</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutExternalUserInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the external user info is not found
		/// </returns>
		public Result CopyExternalUserInfoByIndex(CopyExternalUserInfoByIndexOptions options, out ExternalUserInfo outExternalUserInfo)
		{
			var optionsInternal = Helper.CopyProperties<CopyExternalUserInfoByIndexOptionsInternal>(options);

			outExternalUserInfo = Helper.GetDefault<ExternalUserInfo>();

			var outExternalUserInfoAddress = IntPtr.Zero;

			var funcResult = EOS_UserInfo_CopyExternalUserInfoByIndex(InnerHandle, ref optionsInternal, ref outExternalUserInfoAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<ExternalUserInfoInternal, ExternalUserInfo>(outExternalUserInfoAddress, out outExternalUserInfo))
			{
				EOS_UserInfo_ExternalUserInfo_Release(outExternalUserInfoAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches an external user info for a given external account type.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the account type being accessed</param>
		/// <param name="outExternalUserInfo">The external user info. If it exists and is valid, use <see cref="Release" /> when finished</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutExternalUserInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the external user info is not found
		/// </returns>
		public Result CopyExternalUserInfoByAccountType(CopyExternalUserInfoByAccountTypeOptions options, out ExternalUserInfo outExternalUserInfo)
		{
			var optionsInternal = Helper.CopyProperties<CopyExternalUserInfoByAccountTypeOptionsInternal>(options);

			outExternalUserInfo = Helper.GetDefault<ExternalUserInfo>();

			var outExternalUserInfoAddress = IntPtr.Zero;

			var funcResult = EOS_UserInfo_CopyExternalUserInfoByAccountType(InnerHandle, ref optionsInternal, ref outExternalUserInfoAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<ExternalUserInfoInternal, ExternalUserInfo>(outExternalUserInfoAddress, out outExternalUserInfo))
			{
				EOS_UserInfo_ExternalUserInfo_Release(outExternalUserInfoAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		/// <summary>
		/// Fetches an external user info for a given external account ID.
		/// <seealso cref="Release" />
		/// </summary>
		/// <param name="options">Structure containing the account ID being accessed</param>
		/// <param name="outExternalUserInfo">The external user info. If it exists and is valid, use <see cref="Release" /> when finished</param>
		/// <returns>
		/// <see cref="Result.Success" /> if the information is available and passed out in OutExternalUserInfo
		/// <see cref="Result.InvalidParameters" /> if you pass a null pointer for the out parameter
		/// <see cref="Result.NotFound" /> if the external user info is not found
		/// </returns>
		public Result CopyExternalUserInfoByAccountId(CopyExternalUserInfoByAccountIdOptions options, out ExternalUserInfo outExternalUserInfo)
		{
			var optionsInternal = Helper.CopyProperties<CopyExternalUserInfoByAccountIdOptionsInternal>(options);

			outExternalUserInfo = Helper.GetDefault<ExternalUserInfo>();

			var outExternalUserInfoAddress = IntPtr.Zero;

			var funcResult = EOS_UserInfo_CopyExternalUserInfoByAccountId(InnerHandle, ref optionsInternal, ref outExternalUserInfoAddress);
			Helper.TryMarshalDispose(ref optionsInternal);

			if (Helper.TryMarshalGet<ExternalUserInfoInternal, ExternalUserInfo>(outExternalUserInfoAddress, out outExternalUserInfo))
			{
				EOS_UserInfo_ExternalUserInfo_Release(outExternalUserInfoAddress);
			}

			var funcResultReturn = Helper.GetDefault<Result>();
			Helper.TryMarshalGet(funcResult, out funcResultReturn);
			return funcResultReturn;
		}

		[MonoPInvokeCallback]
		internal static void OnQueryUserInfoByExternalAccount(IntPtr address)
		{
			OnQueryUserInfoByExternalAccountCallback callback = null;
			QueryUserInfoByExternalAccountCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryUserInfoByExternalAccountCallback, QueryUserInfoByExternalAccountCallbackInfoInternal, QueryUserInfoByExternalAccountCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnQueryUserInfoByDisplayName(IntPtr address)
		{
			OnQueryUserInfoByDisplayNameCallback callback = null;
			QueryUserInfoByDisplayNameCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryUserInfoByDisplayNameCallback, QueryUserInfoByDisplayNameCallbackInfoInternal, QueryUserInfoByDisplayNameCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[MonoPInvokeCallback]
		internal static void OnQueryUserInfo(IntPtr address)
		{
			OnQueryUserInfoCallback callback = null;
			QueryUserInfoCallbackInfo callbackInfo = null;
			if (Helper.TryGetAndRemoveCallback<OnQueryUserInfoCallback, QueryUserInfoCallbackInfoInternal, QueryUserInfoCallbackInfo>(address, out callback, out callbackInfo))
			{
				callback(callbackInfo);
			}
		}

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UserInfo_ExternalUserInfo_Release(IntPtr externalUserInfo);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UserInfo_Release(IntPtr userInfo);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountId(IntPtr handle, ref CopyExternalUserInfoByAccountIdOptionsInternal options, ref IntPtr outExternalUserInfo);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UserInfo_CopyExternalUserInfoByAccountType(IntPtr handle, ref CopyExternalUserInfoByAccountTypeOptionsInternal options, ref IntPtr outExternalUserInfo);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UserInfo_CopyExternalUserInfoByIndex(IntPtr handle, ref CopyExternalUserInfoByIndexOptionsInternal options, ref IntPtr outExternalUserInfo);

		[DllImport(Config.BinaryName)]
		private static extern uint EOS_UserInfo_GetExternalUserInfoCount(IntPtr handle, ref GetExternalUserInfoCountOptionsInternal options);

		[DllImport(Config.BinaryName)]
		private static extern Result EOS_UserInfo_CopyUserInfo(IntPtr handle, ref CopyUserInfoOptionsInternal options, ref IntPtr outUserInfo);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UserInfo_QueryUserInfoByExternalAccount(IntPtr handle, ref QueryUserInfoByExternalAccountOptionsInternal options, IntPtr clientData, OnQueryUserInfoByExternalAccountCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UserInfo_QueryUserInfoByDisplayName(IntPtr handle, ref QueryUserInfoByDisplayNameOptionsInternal options, IntPtr clientData, OnQueryUserInfoByDisplayNameCallbackInternal completionDelegate);

		[DllImport(Config.BinaryName)]
		private static extern void EOS_UserInfo_QueryUserInfo(IntPtr handle, ref QueryUserInfoOptionsInternal options, IntPtr clientData, OnQueryUserInfoCallbackInternal completionDelegate);
	}
}