// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Contains information about a single achievement definition with localized text.
	/// </summary>
	public class Definition
	{
		/// <summary>
		/// API Version: Set this to <see cref="AchievementsInterface.DefinitionApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return AchievementsInterface.DefinitionApiLatest; } }

		/// <summary>
		/// Achievement ID that can be used to uniquely identify the achievement.
		/// </summary>
		public string AchievementId { get; set; }

		/// <summary>
		/// Text representing the Name to display in-game when achievement has been unlocked.
		/// </summary>
		public string DisplayName { get; set; }

		/// <summary>
		/// Text representing the description to display in-game when achievement has been unlocked.
		/// </summary>
		public string Description { get; set; }

		/// <summary>
		/// Text representing the name to display in-game when achievement is locked.
		/// </summary>
		public string LockedDisplayName { get; set; }

		/// <summary>
		/// Text representing the description of what needs to be done to trigger the unlock of this achievement.
		/// </summary>
		public string LockedDescription { get; set; }

		/// <summary>
		/// Text representing the description to display in-game when achievement is hidden.
		/// </summary>
		public string HiddenDescription { get; set; }

		/// <summary>
		/// Text representing the description of what happens when the achievement is unlocked.
		/// </summary>
		public string CompletionDescription { get; set; }

		/// <summary>
		/// Text representing the icon to display in-game when achievement is unlocked.
		/// </summary>
		public string UnlockedIconId { get; set; }

		/// <summary>
		/// Text representing the icon to display in-game when achievement is locked.
		/// </summary>
		public string LockedIconId { get; set; }

		/// <summary>
		/// True if achievement is hidden, false otherwise.
		/// </summary>
		public bool IsHidden { get; set; }

		/// <summary>
		/// Array of stat thresholds that need to be satisfied to unlock the achievement.
		/// </summary>
		public StatThresholds[] StatThresholds { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct DefinitionInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_AchievementId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_DisplayName;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Description;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_LockedDisplayName;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_LockedDescription;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_HiddenDescription;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_CompletionDescription;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_UnlockedIconId;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_LockedIconId;
		private int m_IsHidden;
		private int m_StatThresholdsCount;
		private IntPtr m_StatThresholds;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string AchievementId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_AchievementId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AchievementId, value); }
		}

		public string DisplayName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_DisplayName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_DisplayName, value); }
		}

		public string Description
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Description, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Description, value); }
		}

		public string LockedDisplayName
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_LockedDisplayName, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LockedDisplayName, value); }
		}

		public string LockedDescription
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_LockedDescription, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LockedDescription, value); }
		}

		public string HiddenDescription
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_HiddenDescription, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_HiddenDescription, value); }
		}

		public string CompletionDescription
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_CompletionDescription, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_CompletionDescription, value); }
		}

		public string UnlockedIconId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_UnlockedIconId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_UnlockedIconId, value); }
		}

		public string LockedIconId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_LockedIconId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LockedIconId, value); }
		}

		public bool IsHidden
		{
			get
			{
				var value = Helper.GetDefault<bool>();
				Helper.TryMarshalGet(m_IsHidden, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_IsHidden, value); }
		}

		public StatThresholdsInternal[] StatThresholds
		{
			get
			{
				var value = Helper.GetDefault<StatThresholdsInternal[]>();
				Helper.TryMarshalGet(m_StatThresholds, out value, m_StatThresholdsCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_StatThresholds, value, out m_StatThresholdsCount); }
		}

		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_StatThresholds);
		}
	}
}