// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Achievements
{
	/// <summary>
	/// Input parameters for the <see cref="AchievementsInterface.QueryDefinitions" /> function.
	/// </summary>
	public class QueryDefinitionsOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="AchievementsInterface.QuerydefinitionsApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return AchievementsInterface.QuerydefinitionsApiLatest; } }

		/// <summary>
		/// Product User ID for user who is querying definitions.
		/// The localized text returned will be based on the locale code of the given user if they have a linked Epic Online Services Account ID.
		/// The localized text returned can also be overridden using <see cref="Platform.PlatformInterface.SetOverrideLocaleCode" /> to override the locale.
		/// If the locale code is not overridden and LocalUserId is not valid, default text will be returned.
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Deprecated
		/// </summary>
		public EpicAccountId EpicUserId_DEPRECATED { get; set; }

		/// <summary>
		/// Deprecated
		/// </summary>
		public string[] HiddenAchievementIds_DEPRECATED { get; set; }

	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct QueryDefinitionsOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private IntPtr m_EpicUserId_DEPRECATED;
		private IntPtr m_HiddenAchievementIds_DEPRECATED;
		private uint m_HiddenAchievementsCount_DEPRECATED;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public EpicAccountId EpicUserId_DEPRECATED
		{
			get
			{
				var value = Helper.GetDefault<EpicAccountId>();
				Helper.TryMarshalGet(m_EpicUserId_DEPRECATED, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_EpicUserId_DEPRECATED, value); }
		}

		public string[] HiddenAchievementIds_DEPRECATED
		{
			get
			{
				var value = Helper.GetDefault<string[]>();
				Helper.TryMarshalGet(m_HiddenAchievementIds_DEPRECATED, out value, m_HiddenAchievementsCount_DEPRECATED);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_HiddenAchievementIds_DEPRECATED, value, out m_HiddenAchievementsCount_DEPRECATED); }
		}


		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_HiddenAchievementIds_DEPRECATED);
		}
	}
}