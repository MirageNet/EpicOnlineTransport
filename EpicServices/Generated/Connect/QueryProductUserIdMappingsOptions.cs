// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.QueryProductUserIdMappings" /> function.
	/// </summary>
	public class QueryProductUserIdMappingsOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="ConnectInterface.QueryproductuseridmappingsApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return ConnectInterface.QueryproductuseridmappingsApiLatest; } }

		/// <summary>
		/// The Product User ID of the existing, logged-in user who is querying account mappings
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// Deprecated - all external mappings are included in this call, it is no longer necessary to specify this value
		/// </summary>
		public ExternalAccountType AccountIdType_DEPRECATED { get; set; }

		/// <summary>
		/// An array of Product User IDs to query for the given external account representation
		/// </summary>
		public ProductUserId[] ProductUserIds { get; set; }

	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct QueryProductUserIdMappingsOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private ExternalAccountType m_AccountIdType_DEPRECATED;
		private IntPtr m_ProductUserIds;
		private uint m_ProductUserIdCount;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public ExternalAccountType AccountIdType_DEPRECATED
		{
			get
			{
				var value = Helper.GetDefault<ExternalAccountType>();
				Helper.TryMarshalGet(m_AccountIdType_DEPRECATED, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AccountIdType_DEPRECATED, value); }
		}

		public ProductUserId[] ProductUserIds
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId[]>();
				Helper.TryMarshalGet(m_ProductUserIds, out value, m_ProductUserIdCount);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductUserIds, value, out m_ProductUserIdCount); }
		}


		public void Dispose()
		{
			Helper.TryMarshalDispose(ref m_ProductUserIds);
		}
	}
}