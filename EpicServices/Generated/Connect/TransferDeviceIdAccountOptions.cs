// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.TransferDeviceIdAccount" /> Function.
	/// </summary>
	public class TransferDeviceIdAccountOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="ConnectInterface.TransferdeviceidaccountApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return ConnectInterface.TransferdeviceidaccountApiLatest; } }

		/// <summary>
		/// The primary product user id, currently logged in, that is already associated with a real external user account (such as Epic Games, Playstation, Xbox and other).
		/// 
		/// The account linking keychain that owns this product user will be preserved and receive
		/// the Device ID login credentials under it.
		/// </summary>
		public ProductUserId PrimaryLocalUserId { get; set; }

		/// <summary>
		/// The product user id, currently logged in, that has been originally created using the anonymous local Device ID login type,
		/// and whose Device ID login will be transferred to the keychain of the PrimaryLocalUserId.
		/// </summary>
		public ProductUserId LocalDeviceUserId { get; set; }

		/// <summary>
		/// Specifies which <see cref="ProductUserId" /> (i.e. game progression) will be preserved in the operation.
		/// 
		/// After a successful transfer operation, subsequent logins using the same external account or
		/// the same local Device ID login will return user session for the ProductUserIdToPreserve.
		/// 
		/// Set to either PrimaryLocalUserId or LocalDeviceUserId.
		/// </summary>
		public ProductUserId ProductUserIdToPreserve { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct TransferDeviceIdAccountOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_PrimaryLocalUserId;
		private IntPtr m_LocalDeviceUserId;
		private IntPtr m_ProductUserIdToPreserve;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId PrimaryLocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_PrimaryLocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_PrimaryLocalUserId, value); }
		}

		public ProductUserId LocalDeviceUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalDeviceUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalDeviceUserId, value); }
		}

		public ProductUserId ProductUserIdToPreserve
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_ProductUserIdToPreserve, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ProductUserIdToPreserve, value); }
		}

		public void Dispose()
		{
		}
	}
}