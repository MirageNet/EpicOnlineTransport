// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// Input parameters for the <see cref="ConnectInterface.GetExternalAccountMapping" /> function.
	/// </summary>
	public class GetExternalAccountMappingsOptions
	{
		/// <summary>
		/// API Version: Set this to <see cref="ConnectInterface.GetexternalaccountmappingApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return ConnectInterface.GetexternalaccountmappingApiLatest; } }

		/// <summary>
		/// The Product User ID of the existing, logged-in user who is querying account mappings
		/// </summary>
		public ProductUserId LocalUserId { get; set; }

		/// <summary>
		/// External auth service supplying the account IDs in string form
		/// </summary>
		public ExternalAccountType AccountIdType { get; set; }

		/// <summary>
		/// Target user to retrieve the mapping for, as an external account ID
		/// </summary>
		public string TargetExternalUserId { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct GetExternalAccountMappingsOptionsInternal : IDisposable
	{
		private int m_ApiVersion;
		private IntPtr m_LocalUserId;
		private ExternalAccountType m_AccountIdType;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_TargetExternalUserId;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public ProductUserId LocalUserId
		{
			get
			{
				var value = Helper.GetDefault<ProductUserId>();
				Helper.TryMarshalGet(m_LocalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_LocalUserId, value); }
		}

		public ExternalAccountType AccountIdType
		{
			get
			{
				var value = Helper.GetDefault<ExternalAccountType>();
				Helper.TryMarshalGet(m_AccountIdType, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_AccountIdType, value); }
		}

		public string TargetExternalUserId
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_TargetExternalUserId, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_TargetExternalUserId, value); }
		}

		public void Dispose()
		{
		}
	}
}