// Copyright Epic Games, Inc. All Rights Reserved.
// This file is automatically generated. Changes to this file may be overwritten.

using System;
using System.Runtime.InteropServices;

namespace Epic.OnlineServices.Connect
{
	/// <summary>
	/// A structure that contains external login credentials.
	/// 
	/// This is part of the input structure <see cref="LoginOptions" />
	/// <seealso cref="ExternalCredentialType" />
	/// <seealso cref="ConnectInterface.Login" />
	/// </summary>
	public class Credentials
	{
		/// <summary>
		/// API Version: Set this to <see cref="ConnectInterface.CredentialsApiLatest" />.
		/// </summary>
		public int ApiVersion { get { return ConnectInterface.CredentialsApiLatest; } }

		/// <summary>
		/// External token associated with the user logging in
		/// </summary>
		public string Token { get; set; }

		/// <summary>
		/// Type of external login; identifies the auth method to use
		/// </summary>
		public ExternalCredentialType Type { get; set; }
	}

	[StructLayout(LayoutKind.Sequential, Pack = 8)]
	internal struct CredentialsInternal : IDisposable
	{
		private int m_ApiVersion;
		[MarshalAs(UnmanagedType.LPStr)]
		private string m_Token;
		private ExternalCredentialType m_Type;

		public int ApiVersion
		{
			get
			{
				var value = Helper.GetDefault<int>();
				Helper.TryMarshalGet(m_ApiVersion, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_ApiVersion, value); }
		}

		public string Token
		{
			get
			{
				var value = Helper.GetDefault<string>();
				Helper.TryMarshalGet(m_Token, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Token, value); }
		}

		public ExternalCredentialType Type
		{
			get
			{
				var value = Helper.GetDefault<ExternalCredentialType>();
				Helper.TryMarshalGet(m_Type, out value);
				return value;
			}
			set { Helper.TryMarshalSet(ref m_Type, value); }
		}

		public void Dispose()
		{
		}
	}
}